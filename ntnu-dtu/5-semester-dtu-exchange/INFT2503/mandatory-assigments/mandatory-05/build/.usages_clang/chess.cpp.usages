22 serialization::archive 19 0 0 0 0 93 H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05 99 H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\build 0 0 1086 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 1 < 1 10 1 11 18446744073709551615 8 iostream 1 11 1 19 18446744073709551615 1 > 1 19 1 20 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 6 memory 2 11 2 17 18446744073709551615 1 > 2 17 2 18 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 6 string 3 11 3 17 18446744073709551615 1 > 3 17 3 18 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 6 vector 4 11 4 17 18446744073709551615 1 > 4 17 4 18 18446744073709551615 5 using 6 1 6 6 18446744073709551615 9 namespace 6 7 6 16 18446744073709551615 3 std 6 17 6 20 0 1 ; 6 20 6 21 18446744073709551615 5 class 8 1 8 6 18446744073709551615 10 ChessBoard 8 7 8 17 1 1 { 8 18 8 19 18446744073709551615 6 public 9 1 9 7 18446744073709551615 1 : 9 7 9 8 18446744073709551615 4 enum 10 3 10 7 18446744073709551615 5 class 10 8 10 13 18446744073709551615 5 Color 10 14 10 19 2 1 { 10 20 10 21 18446744073709551615 5 WHITE 10 22 10 27 3 1 , 10 27 10 28 18446744073709551615 5 BLACK 11 22 11 27 4 1 } 11 28 11 29 18446744073709551615 1 ; 11 29 11 30 18446744073709551615 4 void 12 3 12 7 18446744073709551615 11 print_board 12 8 12 19 5 1 ( 12 19 12 20 5 1 ) 12 20 12 21 5 1 { 12 22 12 23 18446744073709551615 3 for 13 5 13 8 18446744073709551615 1 ( 13 9 13 10 18446744073709551615 3 int 13 10 13 13 18446744073709551615 1 y 13 14 13 15 6 1 = 13 16 13 17 18446744073709551615 1 7 13 18 13 19 18446744073709551615 1 ; 13 19 13 20 18446744073709551615 1 y 13 21 13 22 6 2 >= 13 23 13 25 18446744073709551615 1 0 13 26 13 27 18446744073709551615 1 ; 13 27 13 28 18446744073709551615 2 -- 13 29 13 31 18446744073709551615 1 y 13 31 13 32 6 1 ) 13 32 13 33 18446744073709551615 1 { 13 34 13 35 18446744073709551615 3 for 14 7 14 10 18446744073709551615 1 ( 14 11 14 12 18446744073709551615 3 int 14 12 14 15 18446744073709551615 1 x 14 16 14 17 7 1 = 14 18 14 19 18446744073709551615 1 0 14 20 14 21 18446744073709551615 1 ; 14 21 14 22 18446744073709551615 1 x 14 23 14 24 7 1 < 14 25 14 26 18446744073709551615 1 8 14 27 14 28 18446744073709551615 1 ; 14 28 14 29 18446744073709551615 2 ++ 14 30 14 32 18446744073709551615 1 x 14 32 14 33 7 1 ) 14 33 14 34 18446744073709551615 1 { 14 35 14 36 18446744073709551615 2 if 15 9 15 11 18446744073709551615 1 ( 15 12 15 13 18446744073709551615 7 squares 15 13 15 20 8 1 [ 15 20 15 21 9 1 x 15 21 15 22 7 1 ] 15 22 15 23 9 1 [ 15 23 15 24 9 1 y 15 24 15 25 6 1 ] 15 25 15 26 9 1 ) 15 26 15 27 18446744073709551615 1 { 15 28 15 29 18446744073709551615 4 cout 16 11 16 15 10 2 << 16 16 16 18 11 7 squares 16 19 16 26 8 1 [ 16 26 16 27 9 1 x 16 27 16 28 7 1 ] 16 28 16 29 9 1 [ 16 29 16 30 9 1 y 16 30 16 31 6 1 ] 16 31 16 32 9 2 -> 16 32 16 34 12 10 identifier 16 34 16 44 13 1 ( 16 44 16 45 13 1 ) 16 45 16 46 13 2 << 16 47 16 49 11 3 ' ' 16 50 16 53 18446744073709551615 1 ; 16 53 16 54 18446744073709551615 1 } 17 9 17 10 18446744073709551615 4 else 17 11 17 15 18446744073709551615 1 { 17 16 17 17 18446744073709551615 4 cout 18 11 18 15 10 2 << 18 16 18 18 11 4 ". " 18 19 18 23 18446744073709551615 1 ; 18 23 18 24 18446744073709551615 1 } 19 9 19 10 18446744073709551615 1 } 20 7 20 8 18446744073709551615 4 cout 21 7 21 11 10 2 << 21 12 21 14 14 4 endl 21 15 21 19 15 1 ; 21 19 21 20 18446744073709551615 1 } 22 5 22 6 18446744073709551615 1 } 23 3 23 4 18446744073709551615 5 class 25 3 25 8 18446744073709551615 5 Piece 25 9 25 14 16 1 { 25 15 25 16 18446744073709551615 6 public 26 3 26 9 18446744073709551615 1 : 26 9 26 10 18446744073709551615 5 Piece 27 5 27 10 16 1 ( 27 10 27 11 16 5 Color 27 11 27 16 2 5 color 27 17 27 22 17 1 ) 27 22 27 23 16 1 : 27 24 27 25 16 5 color 27 26 27 31 18 1 ( 27 31 27 32 16 5 color 27 32 27 37 17 1 ) 27 37 27 38 16 1 { 27 39 27 40 18446744073709551615 1 } 27 40 27 41 18446744073709551615 7 virtual 28 5 28 12 18446744073709551615 1 ~ 28 13 28 14 18446744073709551615 5 Piece 28 14 28 19 16 1 ( 28 19 28 20 18446744073709551615 1 ) 28 20 28 21 18446744073709551615 1 { 28 22 28 23 18446744073709551615 1 } 28 23 28 24 18446744073709551615 7 virtual 29 5 29 12 18446744073709551615 4 char 29 13 29 17 18446744073709551615 10 identifier 29 18 29 28 13 1 ( 29 28 29 29 13 1 ) 29 29 29 30 13 5 const 29 31 29 36 18446744073709551615 1 = 29 37 29 38 13 1 0 29 39 29 40 18446744073709551615 1 ; 29 40 29 41 18446744073709551615 5 Color 31 5 31 10 2 5 color 31 11 31 16 18 1 ; 31 16 31 17 18446744073709551615 3 std 32 5 32 8 0 2 :: 32 8 32 10 19 6 string 32 10 32 16 20 12 color_string 32 17 32 29 19 1 ( 32 29 32 30 19 1 ) 32 30 32 31 19 5 const 32 32 32 37 18446744073709551615 1 { 32 38 32 39 18446744073709551615 2 if 33 7 33 9 18446744073709551615 1 ( 33 10 33 11 18446744073709551615 5 color 33 11 33 16 18 2 == 33 17 33 19 18446744073709551615 5 Color 33 20 33 25 2 2 :: 33 25 33 27 18446744073709551615 5 WHITE 33 27 33 32 3 1 ) 33 32 33 33 18446744073709551615 6 return 34 9 34 15 18446744073709551615 7 "white" 34 16 34 23 18446744073709551615 1 ; 34 23 34 24 18446744073709551615 4 else 35 7 35 11 18446744073709551615 6 return 36 9 36 15 18446744073709551615 7 "black" 36 16 36 23 18446744073709551615 1 ; 36 23 36 24 18446744073709551615 1 } 37 5 37 6 18446744073709551615 44 /// Return color and type of the chess piece 39 5 39 49 18446744073709551615 7 virtual 40 5 40 12 18446744073709551615 3 std 40 13 40 16 0 2 :: 40 16 40 18 21 6 string 40 18 40 24 20 4 type 40 25 40 29 21 1 ( 40 29 40 30 21 1 ) 40 30 40 31 21 5 const 40 32 40 37 18446744073709551615 1 = 40 38 40 39 21 1 0 40 40 40 41 18446744073709551615 1 ; 40 41 40 42 18446744073709551615 55 /// Returns true if the given chess piece move is valid 42 5 42 60 18446744073709551615 7 virtual 43 5 43 12 18446744073709551615 4 bool 43 13 43 17 18446744073709551615 10 valid_move 43 18 43 28 22 1 ( 43 28 43 29 22 3 int 43 29 43 32 18446744073709551615 6 from_x 43 33 43 39 23 1 , 43 39 43 40 22 3 int 43 41 43 44 18446744073709551615 6 from_y 43 45 43 51 24 1 , 43 51 43 52 22 3 int 43 53 43 56 18446744073709551615 4 to_x 43 57 43 61 25 1 , 43 61 43 62 22 3 int 43 63 43 66 18446744073709551615 4 to_y 43 67 43 71 26 1 ) 43 71 43 72 22 5 const 43 73 43 78 18446744073709551615 1 = 43 79 43 80 22 1 0 43 81 43 82 18446744073709551615 1 ; 43 82 43 83 18446744073709551615 1 } 44 3 44 4 18446744073709551615 1 ; 44 4 44 5 18446744073709551615 5 class 46 3 46 8 18446744073709551615 4 King 46 9 46 13 27 1 : 46 14 46 15 18446744073709551615 6 public 46 16 46 22 18446744073709551615 5 Piece 46 23 46 28 16 1 { 46 29 46 30 18446744073709551615 6 public 47 3 47 9 18446744073709551615 1 : 47 9 47 10 18446744073709551615 4 King 48 5 48 9 27 1 ( 48 9 48 10 27 5 Color 48 10 48 15 2 5 color 48 16 48 21 28 1 ) 48 21 48 22 27 1 : 48 23 48 24 27 5 Piece 48 25 48 30 16 1 ( 48 30 48 31 16 5 color 48 31 48 36 28 1 ) 48 36 48 37 16 1 { 48 38 48 39 18446744073709551615 1 } 48 39 48 40 18446744073709551615 4 char 50 5 50 9 18446744073709551615 10 identifier 50 10 50 20 13 1 ( 50 20 50 21 13 1 ) 50 21 50 22 13 5 const 50 23 50 28 18446744073709551615 8 override 50 29 50 37 18446744073709551615 1 { 50 38 50 39 18446744073709551615 6 return 51 7 51 13 18446744073709551615 5 color 51 14 51 19 18 2 == 51 20 51 22 18446744073709551615 5 Color 51 23 51 28 2 2 :: 51 28 51 30 18446744073709551615 5 WHITE 51 30 51 35 3 1 ? 51 36 51 37 18446744073709551615 3 'K' 51 38 51 41 18446744073709551615 1 : 51 42 51 43 18446744073709551615 3 'k' 51 44 51 47 18446744073709551615 1 ; 51 47 51 48 18446744073709551615 1 } 52 5 52 6 18446744073709551615 3 std 54 5 54 8 0 2 :: 54 8 54 10 21 6 string 54 10 54 16 20 4 type 54 17 54 21 21 1 ( 54 21 54 22 21 1 ) 54 22 54 23 21 5 const 54 24 54 29 18446744073709551615 8 override 54 30 54 38 18446744073709551615 1 { 54 39 54 40 18446744073709551615 6 return 55 7 55 13 18446744073709551615 12 color_string 55 14 55 26 19 1 ( 55 26 55 27 19 1 ) 55 27 55 28 19 1 + 55 29 55 30 29 7 " king" 55 31 55 38 18446744073709551615 1 ; 55 38 55 39 18446744073709551615 1 } 56 5 56 6 18446744073709551615 4 bool 58 5 58 9 18446744073709551615 10 valid_move 58 10 58 20 22 1 ( 58 20 58 21 22 3 int 58 21 58 24 18446744073709551615 6 from_x 58 25 58 31 30 1 , 58 31 58 32 22 3 int 58 33 58 36 18446744073709551615 6 from_y 58 37 58 43 31 1 , 58 43 58 44 22 3 int 58 45 58 48 18446744073709551615 4 to_x 58 49 58 53 32 1 , 58 53 58 54 22 3 int 58 55 58 58 18446744073709551615 4 to_y 58 59 58 63 33 1 ) 58 63 58 64 22 5 const 58 65 58 70 18446744073709551615 8 override 58 71 58 79 18446744073709551615 1 { 58 80 58 81 18446744073709551615 3 int 59 7 59 10 18446744073709551615 2 dx 59 11 59 13 34 1 = 59 14 59 15 18446744073709551615 3 abs 59 16 59 19 35 1 ( 59 19 59 20 35 6 from_x 59 20 59 26 30 1 - 59 27 59 28 18446744073709551615 4 to_x 59 29 59 33 32 1 ) 59 33 59 34 35 1 ; 59 34 59 35 18446744073709551615 3 int 60 7 60 10 18446744073709551615 2 dy 60 11 60 13 36 1 = 60 14 60 15 18446744073709551615 3 abs 60 16 60 19 35 1 ( 60 19 60 20 35 6 from_y 60 20 60 26 31 1 - 60 27 60 28 18446744073709551615 4 to_y 60 29 60 33 33 1 ) 60 33 60 34 35 1 ; 60 34 60 35 18446744073709551615 6 return 61 7 61 13 18446744073709551615 2 dx 61 14 61 16 34 2 <= 61 17 61 19 18446744073709551615 1 1 61 20 61 21 18446744073709551615 2 && 61 22 61 24 18446744073709551615 2 dy 61 25 61 27 36 2 <= 61 28 61 30 18446744073709551615 1 1 61 31 61 32 18446744073709551615 1 ; 61 32 61 33 18446744073709551615 1 } 62 5 62 6 18446744073709551615 1 } 63 3 63 4 18446744073709551615 1 ; 63 4 63 5 18446744073709551615 5 class 65 3 65 8 18446744073709551615 6 Knight 65 9 65 15 37 1 : 65 16 65 17 18446744073709551615 6 public 65 18 65 24 18446744073709551615 5 Piece 65 25 65 30 16 1 { 65 31 65 32 18446744073709551615 6 public 66 3 66 9 18446744073709551615 1 : 66 9 66 10 18446744073709551615 6 Knight 67 5 67 11 37 1 ( 67 11 67 12 37 5 Color 67 12 67 17 2 5 color 67 18 67 23 38 1 ) 67 23 67 24 37 1 : 67 25 67 26 37 5 Piece 67 27 67 32 16 1 ( 67 32 67 33 16 5 color 67 33 67 38 38 1 ) 67 38 67 39 16 1 { 67 40 67 41 18446744073709551615 1 } 67 41 67 42 18446744073709551615 4 char 69 5 69 9 18446744073709551615 10 identifier 69 10 69 20 13 1 ( 69 20 69 21 13 1 ) 69 21 69 22 13 5 const 69 23 69 28 18446744073709551615 8 override 69 29 69 37 18446744073709551615 1 { 69 38 69 39 18446744073709551615 6 return 70 7 70 13 18446744073709551615 5 color 70 14 70 19 18 2 == 70 20 70 22 18446744073709551615 5 Color 70 23 70 28 2 2 :: 70 28 70 30 18446744073709551615 5 WHITE 70 30 70 35 3 1 ? 70 36 70 37 18446744073709551615 3 'N' 70 38 70 41 18446744073709551615 1 : 70 42 70 43 18446744073709551615 3 'n' 70 44 70 47 18446744073709551615 1 ; 70 47 70 48 18446744073709551615 1 } 71 5 71 6 18446744073709551615 3 std 73 5 73 8 0 2 :: 73 8 73 10 21 6 string 73 10 73 16 20 4 type 73 17 73 21 21 1 ( 73 21 73 22 21 1 ) 73 22 73 23 21 5 const 73 24 73 29 18446744073709551615 8 override 73 30 73 38 18446744073709551615 1 { 73 39 73 40 18446744073709551615 6 return 74 7 74 13 18446744073709551615 12 color_string 74 14 74 26 19 1 ( 74 26 74 27 19 1 ) 74 27 74 28 19 1 + 74 29 74 30 29 9 " knight" 74 31 74 40 18446744073709551615 1 ; 74 40 74 41 18446744073709551615 1 } 75 5 75 6 18446744073709551615 4 bool 77 5 77 9 18446744073709551615 10 valid_move 77 10 77 20 22 1 ( 77 20 77 21 22 3 int 77 21 77 24 18446744073709551615 6 from_x 77 25 77 31 39 1 , 77 31 77 32 22 3 int 77 33 77 36 18446744073709551615 6 from_y 77 37 77 43 40 1 , 77 43 77 44 22 3 int 77 45 77 48 18446744073709551615 4 to_x 77 49 77 53 41 1 , 77 53 77 54 22 3 int 77 55 77 58 18446744073709551615 4 to_y 77 59 77 63 42 1 ) 77 63 77 64 22 5 const 77 65 77 70 18446744073709551615 8 override 77 71 77 79 18446744073709551615 1 { 77 80 77 81 18446744073709551615 3 int 78 7 78 10 18446744073709551615 2 dx 78 11 78 13 43 1 = 78 14 78 15 18446744073709551615 3 abs 78 16 78 19 35 1 ( 78 19 78 20 35 6 from_x 78 20 78 26 39 1 - 78 27 78 28 18446744073709551615 4 to_x 78 29 78 33 41 1 ) 78 33 78 34 35 1 ; 78 34 78 35 18446744073709551615 3 int 79 7 79 10 18446744073709551615 2 dy 79 11 79 13 44 1 = 79 14 79 15 18446744073709551615 3 abs 79 16 79 19 35 1 ( 79 19 79 20 35 6 from_y 79 20 79 26 40 1 - 79 27 79 28 18446744073709551615 4 to_y 79 29 79 33 42 1 ) 79 33 79 34 35 1 ; 79 34 79 35 18446744073709551615 6 return 80 7 80 13 18446744073709551615 1 ( 80 14 80 15 18446744073709551615 2 dx 80 15 80 17 43 2 == 80 18 80 20 18446744073709551615 1 2 80 21 80 22 18446744073709551615 2 && 80 23 80 25 18446744073709551615 2 dy 80 26 80 28 44 2 == 80 29 80 31 18446744073709551615 1 1 80 32 80 33 18446744073709551615 1 ) 80 33 80 34 18446744073709551615 2 || 80 35 80 37 18446744073709551615 1 ( 80 38 80 39 18446744073709551615 2 dx 80 39 80 41 43 2 == 80 42 80 44 18446744073709551615 1 1 80 45 80 46 18446744073709551615 2 && 80 47 80 49 18446744073709551615 2 dy 80 50 80 52 44 2 == 80 53 80 55 18446744073709551615 1 2 80 56 80 57 18446744073709551615 1 ) 80 57 80 58 18446744073709551615 1 ; 80 58 80 59 18446744073709551615 1 } 81 5 81 6 18446744073709551615 1 } 82 3 82 4 18446744073709551615 1 ; 82 4 82 5 18446744073709551615 10 ChessBoard 84 3 84 13 1 1 ( 84 13 84 14 1 1 ) 84 14 84 15 1 1 { 84 16 84 17 18446744073709551615 57 // Initialize the squares stored in 8 columns and 8 rows: 85 5 85 62 18446744073709551615 7 squares 86 5 86 12 8 1 . 86 12 86 13 45 6 resize 86 13 86 19 45 1 ( 86 19 86 20 45 1 8 86 20 86 21 18446744073709551615 1 ) 86 21 86 22 45 1 ; 86 22 86 23 18446744073709551615 3 for 87 5 87 8 18446744073709551615 1 ( 87 9 87 10 18446744073709551615 4 auto 87 10 87 14 18446744073709551615 1 & 87 15 87 16 18446744073709551615 13 square_column 87 16 87 29 46 1 : 87 30 87 31 47 7 squares 87 32 87 39 8 1 ) 87 39 87 40 18446744073709551615 13 square_column 88 7 88 20 46 1 . 88 20 88 21 45 6 resize 88 21 88 27 45 1 ( 88 27 88 28 45 1 8 88 28 88 29 18446744073709551615 1 ) 88 29 88 30 45 1 ; 88 30 88 31 18446744073709551615 1 } 89 3 89 4 18446744073709551615 47 /// 8x8 squares occupied by 1 or 0 chess pieces 91 3 91 50 18446744073709551615 6 vector 92 3 92 9 48 1 < 92 9 92 10 18446744073709551615 6 vector 92 10 92 16 48 1 < 92 16 92 17 18446744073709551615 10 unique_ptr 92 17 92 27 49 1 < 92 27 92 28 18446744073709551615 5 Piece 92 28 92 33 16 2 >> 92 33 92 35 18446744073709551615 1 > 92 35 92 36 18446744073709551615 7 squares 92 37 92 44 8 1 ; 92 44 92 45 18446744073709551615 45 /// Move a chess piece if it is a valid move. 94 3 94 48 18446744073709551615 41 /// Does not test for check or checkmate. 95 3 95 44 18446744073709551615 4 bool 96 3 96 7 18446744073709551615 10 move_piece 96 8 96 18 50 1 ( 96 18 96 19 50 5 const 96 19 96 24 18446744073709551615 3 std 96 25 96 28 0 2 :: 96 28 96 30 18446744073709551615 6 string 96 30 96 36 20 1 & 96 37 96 38 18446744073709551615 4 from 96 38 96 42 51 1 , 96 42 96 43 50 5 const 96 44 96 49 18446744073709551615 3 std 96 50 96 53 0 2 :: 96 53 96 55 18446744073709551615 6 string 96 55 96 61 20 1 & 96 62 96 63 18446744073709551615 2 to 96 63 96 65 52 1 ) 96 65 96 66 50 1 { 96 67 96 68 18446744073709551615 3 int 97 5 97 8 18446744073709551615 6 from_x 97 9 97 15 53 1 = 97 16 97 17 18446744073709551615 4 from 97 18 97 22 51 1 [ 97 22 97 23 54 1 0 97 23 97 24 18446744073709551615 1 ] 97 24 97 25 54 1 - 97 26 97 27 18446744073709551615 3 'a' 97 28 97 31 18446744073709551615 1 ; 97 31 97 32 18446744073709551615 3 int 98 5 98 8 18446744073709551615 6 from_y 98 9 98 15 55 1 = 98 16 98 17 18446744073709551615 4 stoi 98 18 98 22 56 1 ( 98 22 98 23 56 6 string 98 23 98 29 20 1 ( 98 29 98 30 57 1 ) 98 30 98 31 57 1 + 98 32 98 33 29 4 from 98 34 98 38 51 1 [ 98 38 98 39 54 1 1 98 39 98 40 18446744073709551615 1 ] 98 40 98 41 54 1 ) 98 41 98 42 56 1 - 98 43 98 44 18446744073709551615 1 1 98 45 98 46 18446744073709551615 1 ; 98 46 98 47 18446744073709551615 3 int 99 5 99 8 18446744073709551615 4 to_x 99 9 99 13 58 1 = 99 14 99 15 18446744073709551615 2 to 99 16 99 18 52 1 [ 99 18 99 19 54 1 0 99 19 99 20 18446744073709551615 1 ] 99 20 99 21 54 1 - 99 22 99 23 18446744073709551615 3 'a' 99 24 99 27 18446744073709551615 1 ; 99 27 99 28 18446744073709551615 3 int 100 5 100 8 18446744073709551615 4 to_y 100 9 100 13 59 1 = 100 14 100 15 18446744073709551615 4 stoi 100 16 100 20 56 1 ( 100 20 100 21 56 6 string 100 21 100 27 20 1 ( 100 27 100 28 57 1 ) 100 28 100 29 57 1 + 100 30 100 31 29 2 to 100 32 100 34 52 1 [ 100 34 100 35 54 1 1 100 35 100 36 18446744073709551615 1 ] 100 36 100 37 54 1 ) 100 37 100 38 56 1 - 100 39 100 40 18446744073709551615 1 1 100 41 100 42 18446744073709551615 1 ; 100 42 100 43 18446744073709551615 4 auto 102 5 102 9 18446744073709551615 1 & 102 10 102 11 18446744073709551615 10 piece_from 102 11 102 21 60 1 = 102 22 102 23 18446744073709551615 7 squares 102 24 102 31 8 1 [ 102 31 102 32 9 6 from_x 102 32 102 38 53 1 ] 102 38 102 39 9 1 [ 102 39 102 40 9 6 from_y 102 40 102 46 55 1 ] 102 46 102 47 9 1 ; 102 47 102 48 18446744073709551615 2 if 103 5 103 7 18446744073709551615 1 ( 103 8 103 9 18446744073709551615 10 piece_from 103 9 103 19 60 1 ) 103 19 103 20 18446744073709551615 1 { 103 21 103 22 18446744073709551615 2 if 104 7 104 9 18446744073709551615 1 ( 104 10 104 11 18446744073709551615 10 piece_from 104 11 104 21 60 2 -> 104 21 104 23 12 10 valid_move 104 23 104 33 22 1 ( 104 33 104 34 22 6 from_x 104 34 104 40 53 1 , 104 40 104 41 22 6 from_y 104 42 104 48 55 1 , 104 48 104 49 22 4 to_x 104 50 104 54 58 1 , 104 54 104 55 22 4 to_y 104 56 104 60 59 1 ) 104 60 104 61 22 1 ) 104 61 104 62 18446744073709551615 1 { 104 63 104 64 18446744073709551615 4 cout 105 9 105 13 10 2 << 105 14 105 16 11 10 piece_from 105 17 105 27 60 2 -> 105 27 105 29 12 4 type 105 29 105 33 21 1 ( 105 33 105 34 21 1 ) 105 34 105 35 21 2 << 105 36 105 38 11 18 " is moving from " 105 39 105 57 18446744073709551615 2 << 105 58 105 60 11 4 from 105 61 105 65 51 2 << 105 66 105 68 11 6 " to " 105 69 105 75 18446744073709551615 2 << 105 76 105 78 11 2 to 105 79 105 81 52 2 << 105 82 105 84 14 4 endl 105 85 105 89 15 1 ; 105 89 105 90 18446744073709551615 4 auto 106 9 106 13 18446744073709551615 1 & 106 14 106 15 18446744073709551615 8 piece_to 106 15 106 23 61 1 = 106 24 106 25 18446744073709551615 7 squares 106 26 106 33 8 1 [ 106 33 106 34 9 4 to_x 106 34 106 38 58 1 ] 106 38 106 39 9 1 [ 106 39 106 40 9 4 to_y 106 40 106 44 59 1 ] 106 44 106 45 9 1 ; 106 45 106 46 18446744073709551615 2 if 107 9 107 11 18446744073709551615 1 ( 107 12 107 13 18446744073709551615 8 piece_to 107 13 107 21 61 1 ) 107 21 107 22 18446744073709551615 1 { 107 23 107 24 18446744073709551615 2 if 108 11 108 13 18446744073709551615 1 ( 108 14 108 15 18446744073709551615 10 piece_from 108 15 108 25 60 2 -> 108 25 108 27 12 5 color 108 27 108 32 18 2 != 108 33 108 35 18446744073709551615 8 piece_to 108 36 108 44 61 2 -> 108 44 108 46 12 5 color 108 46 108 51 18 1 ) 108 51 108 52 18446744073709551615 1 { 108 53 108 54 18446744073709551615 4 cout 109 13 109 17 10 2 << 109 18 109 20 11 8 piece_to 109 21 109 29 61 2 -> 109 29 109 31 12 4 type 109 31 109 35 21 1 ( 109 35 109 36 21 1 ) 109 36 109 37 21 2 << 109 38 109 40 11 25 " is being removed from " 109 41 109 66 18446744073709551615 2 << 109 67 109 69 11 2 to 109 70 109 72 52 2 << 109 73 109 75 14 4 endl 109 76 109 80 15 1 ; 109 80 109 81 18446744073709551615 2 if 110 13 110 15 18446744073709551615 1 ( 110 16 110 17 18446744073709551615 4 auto 110 17 110 21 18446744073709551615 4 king 110 22 110 26 62 1 = 110 27 110 28 18446744073709551615 12 dynamic_cast 110 29 110 41 18446744073709551615 1 < 110 41 110 42 18446744073709551615 4 King 110 42 110 46 27 1 * 110 47 110 48 18446744073709551615 1 > 110 48 110 49 18446744073709551615 1 ( 110 49 110 50 18446744073709551615 8 piece_to 110 50 110 58 61 1 . 110 58 110 59 63 3 get 110 59 110 62 63 1 ( 110 62 110 63 63 1 ) 110 63 110 64 63 1 ) 110 64 110 65 18446744073709551615 1 ) 110 65 110 66 18446744073709551615 4 cout 111 15 111 19 10 2 << 111 20 111 22 11 4 king 111 23 111 27 62 2 -> 111 27 111 29 19 12 color_string 111 29 111 41 19 1 ( 111 41 111 42 19 1 ) 111 42 111 43 19 2 << 111 44 111 46 11 16 " lost the game" 111 47 111 63 18446744073709551615 2 << 111 64 111 66 14 4 endl 111 67 111 71 15 1 ; 111 71 111 72 18446744073709551615 1 } 112 11 112 12 18446744073709551615 4 else 112 13 112 17 18446744073709551615 1 { 112 18 112 19 18446744073709551615 76 // piece in the from square has the same color as the piece in the to square 113 13 113 89 18446744073709551615 4 cout 114 13 114 17 10 2 << 114 18 114 20 11 15 "can not move " 114 21 114 36 18446744073709551615 2 << 114 37 114 39 11 10 piece_from 114 40 114 50 60 2 -> 114 50 114 52 12 4 type 114 52 114 56 21 1 ( 114 56 114 57 21 1 ) 114 57 114 58 21 2 << 114 59 114 61 11 8 " from " 114 62 114 70 18446744073709551615 2 << 114 71 114 73 11 4 from 114 74 114 78 51 2 << 114 79 114 81 11 6 " to " 114 82 114 88 18446744073709551615 2 << 114 89 114 91 11 2 to 114 92 114 94 52 2 << 114 95 114 97 14 4 endl 114 98 114 102 15 1 ; 114 102 114 103 18446744073709551615 6 return 115 13 115 19 18446744073709551615 5 false 115 20 115 25 18446744073709551615 1 ; 115 25 115 26 18446744073709551615 1 } 116 11 116 12 18446744073709551615 1 } 117 9 117 10 18446744073709551615 8 piece_to 118 9 118 17 61 1 = 118 18 118 19 64 4 move 118 20 118 24 65 1 ( 118 24 118 25 65 10 piece_from 118 25 118 35 60 1 ) 118 35 118 36 65 1 ; 118 36 118 37 18446744073709551615 6 return 119 9 119 15 18446744073709551615 4 true 119 16 119 20 18446744073709551615 1 ; 119 20 119 21 18446744073709551615 1 } 120 7 120 8 18446744073709551615 4 else 120 9 120 13 18446744073709551615 1 { 120 14 120 15 18446744073709551615 4 cout 121 9 121 13 10 2 << 121 14 121 16 11 15 "can not move " 121 17 121 32 18446744073709551615 2 << 121 33 121 35 11 10 piece_from 121 36 121 46 60 2 -> 121 46 121 48 12 4 type 121 48 121 52 21 1 ( 121 52 121 53 21 1 ) 121 53 121 54 21 2 << 121 55 121 57 11 8 " from " 121 58 121 66 18446744073709551615 2 << 121 67 121 69 11 4 from 121 70 121 74 51 2 << 121 75 121 77 11 6 " to " 121 78 121 84 18446744073709551615 2 << 121 85 121 87 11 2 to 121 88 121 90 52 2 << 121 91 121 93 14 4 endl 121 94 121 98 15 1 ; 121 98 121 99 18446744073709551615 6 return 122 9 122 15 18446744073709551615 5 false 122 16 122 21 18446744073709551615 1 ; 122 21 122 22 18446744073709551615 1 } 123 7 123 8 18446744073709551615 1 } 124 5 124 6 18446744073709551615 4 else 124 7 124 11 18446744073709551615 1 { 124 12 124 13 18446744073709551615 4 cout 125 7 125 11 10 2 << 125 12 125 14 11 14 "no piece at " 125 15 125 29 18446744073709551615 2 << 125 30 125 32 11 4 from 125 33 125 37 51 2 << 125 38 125 40 14 4 endl 125 41 125 45 15 1 ; 125 45 125 46 18446744073709551615 6 return 126 7 126 13 18446744073709551615 5 false 126 14 126 19 18446744073709551615 1 ; 126 19 126 20 18446744073709551615 1 } 127 5 127 6 18446744073709551615 1 } 128 3 128 4 18446744073709551615 1 } 129 1 129 2 18446744073709551615 1 ; 129 2 129 3 18446744073709551615 3 int 131 1 131 4 18446744073709551615 4 main 131 5 131 9 66 1 ( 131 9 131 10 66 1 ) 131 10 131 11 66 1 { 131 12 131 13 18446744073709551615 10 ChessBoard 132 3 132 13 1 5 board 132 14 132 19 67 1 ; 132 19 132 20 18446744073709551615 5 board 134 3 134 8 67 1 . 134 8 134 9 18446744073709551615 7 squares 134 9 134 16 8 1 [ 134 16 134 17 9 1 4 134 17 134 18 18446744073709551615 1 ] 134 18 134 19 9 1 [ 134 19 134 20 9 1 0 134 20 134 21 18446744073709551615 1 ] 134 21 134 22 9 1 = 134 23 134 24 64 11 make_unique 134 25 134 36 68 1 < 134 36 134 37 68 10 ChessBoard 134 37 134 47 1 2 :: 134 47 134 49 68 4 King 134 49 134 53 27 1 > 134 53 134 54 68 1 ( 134 54 134 55 68 10 ChessBoard 134 55 134 65 1 2 :: 134 65 134 67 18446744073709551615 5 Color 134 67 134 72 2 2 :: 134 72 134 74 18446744073709551615 5 WHITE 134 74 134 79 3 1 ) 134 79 134 80 68 1 ; 134 80 134 81 18446744073709551615 5 board 135 3 135 8 67 1 . 135 8 135 9 18446744073709551615 7 squares 135 9 135 16 8 1 [ 135 16 135 17 9 1 1 135 17 135 18 18446744073709551615 1 ] 135 18 135 19 9 1 [ 135 19 135 20 9 1 0 135 20 135 21 18446744073709551615 1 ] 135 21 135 22 9 1 = 135 23 135 24 64 11 make_unique 135 25 135 36 68 1 < 135 36 135 37 68 10 ChessBoard 135 37 135 47 1 2 :: 135 47 135 49 68 6 Knight 135 49 135 55 37 1 > 135 55 135 56 68 1 ( 135 56 135 57 68 10 ChessBoard 135 57 135 67 1 2 :: 135 67 135 69 18446744073709551615 5 Color 135 69 135 74 2 2 :: 135 74 135 76 18446744073709551615 5 WHITE 135 76 135 81 3 1 ) 135 81 135 82 68 1 ; 135 82 135 83 18446744073709551615 5 board 136 3 136 8 67 1 . 136 8 136 9 18446744073709551615 7 squares 136 9 136 16 8 1 [ 136 16 136 17 9 1 6 136 17 136 18 18446744073709551615 1 ] 136 18 136 19 9 1 [ 136 19 136 20 9 1 0 136 20 136 21 18446744073709551615 1 ] 136 21 136 22 9 1 = 136 23 136 24 64 11 make_unique 136 25 136 36 68 1 < 136 36 136 37 68 10 ChessBoard 136 37 136 47 1 2 :: 136 47 136 49 68 6 Knight 136 49 136 55 37 1 > 136 55 136 56 68 1 ( 136 56 136 57 68 10 ChessBoard 136 57 136 67 1 2 :: 136 67 136 69 18446744073709551615 5 Color 136 69 136 74 2 2 :: 136 74 136 76 18446744073709551615 5 WHITE 136 76 136 81 3 1 ) 136 81 136 82 68 1 ; 136 82 136 83 18446744073709551615 5 board 138 3 138 8 67 1 . 138 8 138 9 18446744073709551615 7 squares 138 9 138 16 8 1 [ 138 16 138 17 9 1 4 138 17 138 18 18446744073709551615 1 ] 138 18 138 19 9 1 [ 138 19 138 20 9 1 7 138 20 138 21 18446744073709551615 1 ] 138 21 138 22 9 1 = 138 23 138 24 64 11 make_unique 138 25 138 36 68 1 < 138 36 138 37 68 10 ChessBoard 138 37 138 47 1 2 :: 138 47 138 49 68 4 King 138 49 138 53 27 1 > 138 53 138 54 68 1 ( 138 54 138 55 68 10 ChessBoard 138 55 138 65 1 2 :: 138 65 138 67 18446744073709551615 5 Color 138 67 138 72 2 2 :: 138 72 138 74 18446744073709551615 5 BLACK 138 74 138 79 4 1 ) 138 79 138 80 68 1 ; 138 80 138 81 18446744073709551615 5 board 139 3 139 8 67 1 . 139 8 139 9 18446744073709551615 7 squares 139 9 139 16 8 1 [ 139 16 139 17 9 1 1 139 17 139 18 18446744073709551615 1 ] 139 18 139 19 9 1 [ 139 19 139 20 9 1 7 139 20 139 21 18446744073709551615 1 ] 139 21 139 22 9 1 = 139 23 139 24 64 11 make_unique 139 25 139 36 68 1 < 139 36 139 37 68 10 ChessBoard 139 37 139 47 1 2 :: 139 47 139 49 68 6 Knight 139 49 139 55 37 1 > 139 55 139 56 68 1 ( 139 56 139 57 68 10 ChessBoard 139 57 139 67 1 2 :: 139 67 139 69 18446744073709551615 5 Color 139 69 139 74 2 2 :: 139 74 139 76 18446744073709551615 5 BLACK 139 76 139 81 4 1 ) 139 81 139 82 68 1 ; 139 82 139 83 18446744073709551615 5 board 140 3 140 8 67 1 . 140 8 140 9 18446744073709551615 7 squares 140 9 140 16 8 1 [ 140 16 140 17 9 1 6 140 17 140 18 18446744073709551615 1 ] 140 18 140 19 9 1 [ 140 19 140 20 9 1 7 140 20 140 21 18446744073709551615 1 ] 140 21 140 22 9 1 = 140 23 140 24 64 11 make_unique 140 25 140 36 68 1 < 140 36 140 37 68 10 ChessBoard 140 37 140 47 1 2 :: 140 47 140 49 68 6 Knight 140 49 140 55 37 1 > 140 55 140 56 68 1 ( 140 56 140 57 68 10 ChessBoard 140 57 140 67 1 2 :: 140 67 140 69 18446744073709551615 5 Color 140 69 140 74 2 2 :: 140 74 140 76 18446744073709551615 5 BLACK 140 76 140 81 4 1 ) 140 81 140 82 68 1 ; 140 82 140 83 18446744073709551615 4 cout 142 3 142 7 10 2 << 142 8 142 10 11 16 "Invalid moves:" 142 11 142 27 18446744073709551615 2 << 142 28 142 30 14 4 endl 142 31 142 35 15 1 ; 142 35 142 36 18446744073709551615 5 board 143 3 143 8 67 1 . 143 8 143 9 50 10 move_piece 143 9 143 19 50 1 ( 143 19 143 20 50 4 "e3" 143 20 143 24 18446744073709551615 1 , 143 24 143 25 50 4 "e2" 143 26 143 30 18446744073709551615 1 ) 143 30 143 31 50 1 ; 143 31 143 32 18446744073709551615 5 board 144 3 144 8 67 1 . 144 8 144 9 50 10 move_piece 144 9 144 19 50 1 ( 144 19 144 20 50 4 "e1" 144 20 144 24 18446744073709551615 1 , 144 24 144 25 50 4 "e3" 144 26 144 30 18446744073709551615 1 ) 144 30 144 31 50 1 ; 144 31 144 32 18446744073709551615 5 board 145 3 145 8 67 1 . 145 8 145 9 50 10 move_piece 145 9 145 19 50 1 ( 145 19 145 20 50 4 "b1" 145 20 145 24 18446744073709551615 1 , 145 24 145 25 50 4 "b2" 145 26 145 30 18446744073709551615 1 ) 145 30 145 31 50 1 ; 145 31 145 32 18446744073709551615 4 cout 146 3 146 7 10 2 << 146 8 146 10 14 4 endl 146 11 146 15 15 1 ; 146 15 146 16 18446744073709551615 4 cout 148 3 148 7 10 2 << 148 8 148 10 11 19 "A simulated game:" 148 11 148 30 18446744073709551615 2 << 148 31 148 33 14 4 endl 148 34 148 38 15 1 ; 148 38 148 39 18446744073709551615 5 board 149 3 149 8 67 1 . 149 8 149 9 50 10 move_piece 149 9 149 19 50 1 ( 149 19 149 20 50 4 "e1" 149 20 149 24 18446744073709551615 1 , 149 24 149 25 50 4 "e2" 149 26 149 30 18446744073709551615 1 ) 149 30 149 31 50 1 ; 149 31 149 32 18446744073709551615 5 board 150 3 150 8 67 1 . 150 8 150 9 5 11 print_board 150 9 150 20 5 1 ( 150 20 150 21 5 1 ) 150 21 150 22 5 1 ; 150 22 150 23 18446744073709551615 5 board 151 3 151 8 67 1 . 151 8 151 9 50 10 move_piece 151 9 151 19 50 1 ( 151 19 151 20 50 4 "g8" 151 20 151 24 18446744073709551615 1 , 151 24 151 25 50 4 "h6" 151 26 151 30 18446744073709551615 1 ) 151 30 151 31 50 1 ; 151 31 151 32 18446744073709551615 5 board 152 3 152 8 67 1 . 152 8 152 9 5 11 print_board 152 9 152 20 5 1 ( 152 20 152 21 5 1 ) 152 21 152 22 5 1 ; 152 22 152 23 18446744073709551615 5 board 153 3 153 8 67 1 . 153 8 153 9 50 10 move_piece 153 9 153 19 50 1 ( 153 19 153 20 50 4 "b1" 153 20 153 24 18446744073709551615 1 , 153 24 153 25 50 4 "c3" 153 26 153 30 18446744073709551615 1 ) 153 30 153 31 50 1 ; 153 31 153 32 18446744073709551615 5 board 154 3 154 8 67 1 . 154 8 154 9 5 11 print_board 154 9 154 20 5 1 ( 154 20 154 21 5 1 ) 154 21 154 22 5 1 ; 154 22 154 23 18446744073709551615 5 board 155 3 155 8 67 1 . 155 8 155 9 50 10 move_piece 155 9 155 19 50 1 ( 155 19 155 20 50 4 "h6" 155 20 155 24 18446744073709551615 1 , 155 24 155 25 50 4 "g8" 155 26 155 30 18446744073709551615 1 ) 155 30 155 31 50 1 ; 155 31 155 32 18446744073709551615 5 board 156 3 156 8 67 1 . 156 8 156 9 5 11 print_board 156 9 156 20 5 1 ( 156 20 156 21 5 1 ) 156 21 156 22 5 1 ; 156 22 156 23 18446744073709551615 5 board 157 3 157 8 67 1 . 157 8 157 9 50 10 move_piece 157 9 157 19 50 1 ( 157 19 157 20 50 4 "c3" 157 20 157 24 18446744073709551615 1 , 157 24 157 25 50 4 "d5" 157 26 157 30 18446744073709551615 1 ) 157 30 157 31 50 1 ; 157 31 157 32 18446744073709551615 5 board 158 3 158 8 67 1 . 158 8 158 9 5 11 print_board 158 9 158 20 5 1 ( 158 20 158 21 5 1 ) 158 21 158 22 5 1 ; 158 22 158 23 18446744073709551615 5 board 159 3 159 8 67 1 . 159 8 159 9 50 10 move_piece 159 9 159 19 50 1 ( 159 19 159 20 50 4 "g8" 159 20 159 24 18446744073709551615 1 , 159 24 159 25 50 4 "h6" 159 26 159 30 18446744073709551615 1 ) 159 30 159 31 50 1 ; 159 31 159 32 18446744073709551615 5 board 160 3 160 8 67 1 . 160 8 160 9 5 11 print_board 160 9 160 20 5 1 ( 160 20 160 21 5 1 ) 160 21 160 22 5 1 ; 160 22 160 23 18446744073709551615 5 board 161 3 161 8 67 1 . 161 8 161 9 50 10 move_piece 161 9 161 19 50 1 ( 161 19 161 20 50 4 "d5" 161 20 161 24 18446744073709551615 1 , 161 24 161 25 50 4 "f6" 161 26 161 30 18446744073709551615 1 ) 161 30 161 31 50 1 ; 161 31 161 32 18446744073709551615 5 board 162 3 162 8 67 1 . 162 8 162 9 5 11 print_board 162 9 162 20 5 1 ( 162 20 162 21 5 1 ) 162 21 162 22 5 1 ; 162 22 162 23 18446744073709551615 5 board 163 3 163 8 67 1 . 163 8 163 9 50 10 move_piece 163 9 163 19 50 1 ( 163 19 163 20 50 4 "h6" 163 20 163 24 18446744073709551615 1 , 163 24 163 25 50 4 "g8" 163 26 163 30 18446744073709551615 1 ) 163 30 163 31 50 1 ; 163 31 163 32 18446744073709551615 5 board 164 3 164 8 67 1 . 164 8 164 9 5 11 print_board 164 9 164 20 5 1 ( 164 20 164 21 5 1 ) 164 21 164 22 5 1 ; 164 22 164 23 18446744073709551615 5 board 165 3 165 8 67 1 . 165 8 165 9 50 10 move_piece 165 9 165 19 50 1 ( 165 19 165 20 50 4 "f6" 165 20 165 24 18446744073709551615 1 , 165 24 165 25 50 4 "e8" 165 26 165 30 18446744073709551615 1 ) 165 30 165 31 50 1 ; 165 31 165 32 18446744073709551615 5 board 166 3 166 8 67 1 . 166 8 166 9 5 11 print_board 166 9 166 20 5 1 ( 166 20 166 21 5 1 ) 166 21 166 22 5 1 ; 166 22 166 23 18446744073709551615 1 } 167 1 167 2 18446744073709551615 0 0 69 0 0 0 22 0 0 1 13 0 3 std 4 1 13 0 10 ChessBoard 5 1 13 0 16 Color:ChessBoard 7 1 13 0 22 WHITE:Color:ChessBoard 7 1 13 0 22 BLACK:Color:ChessBoard 21 1 13 0 22 print_board:ChessBoard 9 1 13 0 109 13:14:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 9 1 13 0 109 14:16:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 6 1 13 0 18 squares:ChessBoard 21 1 13 0 21 operator[]:vector:std 9 1 13 0 8 cout:std 8 1 13 0 12 operator:std 21 1 13 0 25 operator->:unique_ptr:std 21 1 13 0 27 identifier:Piece:ChessBoard 21 1 13 0 26 operator:basic_ostream:std 8 1 13 0 8 endl:std 4 1 13 0 16 Piece:ChessBoard 10 1 13 0 109 27:17:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 6 1 13 0 22 color:Piece:ChessBoard 21 1 13 0 29 color_string:Piece:ChessBoard 20 1 13 0 10 string:std 21 1 13 0 21 type:Piece:ChessBoard 21 1 13 0 27 valid_move:Piece:ChessBoard 10 1 13 0 109 43:33:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 10 1 13 0 109 43:45:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 10 1 13 0 109 43:57:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 10 1 13 0 109 43:67:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 4 1 13 0 15 King:ChessBoard 10 1 13 0 109 48:16:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 8 1 13 0 13 operator+:std 10 1 13 0 109 58:25:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 10 1 13 0 109 58:37:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 10 1 13 0 109 58:49:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 10 1 13 0 109 58:59:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 9 1 13 0 109 59:11:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 8 1 13 0 3 abs 9 1 13 0 109 60:11:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 4 1 13 0 17 Knight:ChessBoard 10 1 13 0 109 67:18:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 10 1 13 0 109 77:25:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 10 1 13 0 109 77:37:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 10 1 13 0 109 77:49:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 10 1 13 0 109 77:59:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 9 1 13 0 109 78:11:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 9 1 13 0 109 79:11:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 21 1 13 0 17 resize:vector:std 9 1 13 0 109 87:16:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 21 1 13 0 37 operator*:__normal_iterator:__gnu_cxx 31 1 13 0 10 vector:std 31 1 13 0 14 unique_ptr:std 21 1 13 0 21 move_piece:ChessBoard 10 1 13 0 109 96:38:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 10 1 13 0 109 96:63:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 9 1 13 0 108 97:9:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 21 1 13 0 35 operator[]:basic_string:__cxx11:std 9 1 13 0 108 98:9:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 8 1 13 0 16 stoi:__cxx11:std 24 1 13 0 24 basic_string:__cxx11:std 9 1 13 0 108 99:9:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 9 1 13 0 109 100:9:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 9 1 13 0 110 102:11:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 9 1 13 0 110 106:15:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 9 1 13 0 110 110:22:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 21 1 13 0 18 get:unique_ptr:std 21 1 13 0 24 operator=:unique_ptr:std 8 1 13 0 8 move:std 8 1 13 0 4 main 9 1 13 0 110 132:14:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 8 1 13 0 15 make_unique:std 0 0 1 0 0 0 103 H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-05\chess.cpp 1699406633
22 serialization::archive 19 0 0 0 0 93 H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06 99 H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\build 0 0 1269 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 1 < 1 10 1 11 18446744073709551615 10 functional 1 11 1 21 18446744073709551615 1 > 1 21 1 22 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 8 iostream 2 11 2 19 18446744073709551615 1 > 2 19 2 20 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 6 memory 3 11 3 17 18446744073709551615 1 > 3 17 3 18 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 6 string 4 11 4 17 18446744073709551615 1 > 4 17 4 18 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 6 vector 5 11 5 17 18446744073709551615 1 > 5 17 5 18 18446744073709551615 5 using 7 1 7 6 18446744073709551615 9 namespace 7 7 7 16 18446744073709551615 3 std 7 17 7 20 0 1 ; 7 20 7 21 18446744073709551615 5 class 9 1 9 6 18446744073709551615 10 ChessBoard 9 7 9 17 1 1 { 9 18 9 19 18446744073709551615 6 public 10 1 10 7 18446744073709551615 1 : 10 7 10 8 18446744073709551615 4 enum 11 3 11 7 18446744073709551615 5 class 11 8 11 13 18446744073709551615 5 Color 11 14 11 19 2 1 { 11 20 11 21 18446744073709551615 5 WHITE 11 22 11 27 3 1 , 11 27 11 28 18446744073709551615 5 BLACK 12 22 12 27 4 1 } 12 28 12 29 18446744073709551615 1 ; 12 29 12 30 18446744073709551615 8 function 13 3 13 11 5 1 < 13 11 13 12 18446744073709551615 4 void 13 12 13 16 18446744073709551615 1 ( 13 16 13 17 18446744073709551615 5 const 13 17 13 22 18446744073709551615 6 string 13 23 13 29 6 1 & 13 30 13 31 18446744073709551615 1 , 13 31 13 32 18446744073709551615 5 const 13 33 13 38 18446744073709551615 6 string 13 39 13 45 6 1 & 13 46 13 47 18446744073709551615 1 , 13 47 13 48 18446744073709551615 5 const 13 49 13 54 18446744073709551615 6 string 13 55 13 61 6 1 & 13 62 13 63 18446744073709551615 1 ) 13 63 13 64 18446744073709551615 1 > 13 64 13 65 18446744073709551615 18 after_invalid_move 13 66 13 84 7 1 ; 13 84 13 85 18446744073709551615 8 function 14 3 14 11 5 1 < 14 11 14 12 18446744073709551615 4 void 14 12 14 16 18446744073709551615 1 ( 14 16 14 17 18446744073709551615 5 const 14 17 14 22 18446744073709551615 6 string 14 23 14 29 6 1 & 14 30 14 31 18446744073709551615 1 , 14 31 14 32 18446744073709551615 5 const 14 33 14 38 18446744073709551615 6 string 14 39 14 45 6 1 & 14 46 14 47 18446744073709551615 1 , 14 47 14 48 18446744073709551615 5 const 14 49 14 54 18446744073709551615 6 string 14 55 14 61 6 1 & 14 62 14 63 18446744073709551615 1 ) 14 63 14 64 18446744073709551615 1 > 14 64 14 65 18446744073709551615 16 after_piece_move 14 66 14 82 8 1 ; 14 82 14 83 18446744073709551615 8 function 15 3 15 11 5 1 < 15 11 15 12 18446744073709551615 4 void 15 12 15 16 18446744073709551615 1 ( 15 16 15 17 18446744073709551615 5 const 15 17 15 22 18446744073709551615 6 string 15 23 15 29 6 1 & 15 30 15 31 18446744073709551615 1 , 15 31 15 32 18446744073709551615 5 const 15 33 15 38 18446744073709551615 6 string 15 39 15 45 6 1 & 15 46 15 47 18446744073709551615 1 ) 15 47 15 48 18446744073709551615 1 > 15 48 15 49 18446744073709551615 12 remove_piece 15 50 15 62 9 1 ; 15 62 15 63 18446744073709551615 8 function 16 3 16 11 5 1 < 16 11 16 12 18446744073709551615 4 void 16 12 16 16 18446744073709551615 1 ( 16 16 16 17 18446744073709551615 5 const 16 17 16 22 18446744073709551615 6 string 16 23 16 29 6 1 & 16 30 16 31 18446744073709551615 1 ) 16 31 16 32 18446744073709551615 1 > 16 32 16 33 18446744073709551615 9 game_over 16 34 16 43 10 1 ; 16 43 16 44 18446744073709551615 8 function 17 3 17 11 5 1 < 17 11 17 12 18446744073709551615 4 void 17 12 17 16 18446744073709551615 1 ( 17 16 17 17 18446744073709551615 5 const 17 17 17 22 18446744073709551615 6 string 17 23 17 29 6 1 & 17 30 17 31 18446744073709551615 1 ) 17 31 17 32 18446744073709551615 1 > 17 32 17 33 18446744073709551615 8 no_piece 17 34 17 42 11 1 ; 17 42 17 43 18446744073709551615 5 class 19 3 19 8 18446744073709551615 5 Piece 19 9 19 14 12 1 { 19 15 19 16 18446744073709551615 6 public 20 3 20 9 18446744073709551615 1 : 20 9 20 10 18446744073709551615 5 Piece 21 5 21 10 12 1 ( 21 10 21 11 12 5 Color 21 11 21 16 2 5 color 21 17 21 22 13 1 ) 21 22 21 23 12 1 : 21 24 21 25 12 5 color 21 26 21 31 14 1 ( 21 31 21 32 12 5 color 21 32 21 37 13 1 ) 21 37 21 38 12 1 { 21 39 21 40 18446744073709551615 1 } 21 40 21 41 18446744073709551615 7 virtual 22 5 22 12 18446744073709551615 1 ~ 22 13 22 14 18446744073709551615 5 Piece 22 14 22 19 12 1 ( 22 19 22 20 18446744073709551615 1 ) 22 20 22 21 18446744073709551615 1 { 22 22 22 23 18446744073709551615 1 } 22 23 22 24 18446744073709551615 7 virtual 23 5 23 12 18446744073709551615 4 char 23 13 23 17 18446744073709551615 10 identifier 23 18 23 28 15 1 ( 23 28 23 29 15 1 ) 23 29 23 30 15 5 const 23 31 23 36 18446744073709551615 1 = 23 37 23 38 15 1 0 23 39 23 40 18446744073709551615 1 ; 23 40 23 41 18446744073709551615 5 Color 25 5 25 10 2 5 color 25 11 25 16 14 1 ; 25 16 25 17 18446744073709551615 6 string 26 5 26 11 6 12 color_string 26 12 26 24 16 1 ( 26 24 26 25 16 1 ) 26 25 26 26 16 5 const 26 27 26 32 18446744073709551615 1 { 26 33 26 34 18446744073709551615 2 if 27 7 27 9 18446744073709551615 1 ( 27 10 27 11 18446744073709551615 5 color 27 11 27 16 14 2 == 27 17 27 19 18446744073709551615 5 Color 27 20 27 25 2 2 :: 27 25 27 27 18446744073709551615 5 WHITE 27 27 27 32 3 1 ) 27 32 27 33 18446744073709551615 6 return 28 9 28 15 18446744073709551615 7 "white" 28 16 28 23 18446744073709551615 1 ; 28 23 28 24 18446744073709551615 4 else 29 7 29 11 18446744073709551615 6 return 30 9 30 15 18446744073709551615 7 "black" 30 16 30 23 18446744073709551615 1 ; 30 23 30 24 18446744073709551615 1 } 31 5 31 6 18446744073709551615 44 /// Return color and type of the chess piece 33 5 33 49 18446744073709551615 7 virtual 34 5 34 12 18446744073709551615 6 string 34 13 34 19 6 4 type 34 20 34 24 17 1 ( 34 24 34 25 17 1 ) 34 25 34 26 17 5 const 34 27 34 32 18446744073709551615 1 = 34 33 34 34 17 1 0 34 35 34 36 18446744073709551615 1 ; 34 36 34 37 18446744073709551615 55 /// Returns true if the given chess piece move is valid 36 5 36 60 18446744073709551615 7 virtual 37 5 37 12 18446744073709551615 4 bool 37 13 37 17 18446744073709551615 10 valid_move 37 18 37 28 18 1 ( 37 28 37 29 18 3 int 37 29 37 32 18446744073709551615 6 from_x 37 33 37 39 19 1 , 37 39 37 40 18 3 int 37 41 37 44 18446744073709551615 6 from_y 37 45 37 51 20 1 , 37 51 37 52 18 3 int 37 53 37 56 18446744073709551615 4 to_x 37 57 37 61 21 1 , 37 61 37 62 18 3 int 37 63 37 66 18446744073709551615 4 to_y 37 67 37 71 22 1 ) 37 71 37 72 18 5 const 37 73 37 78 18446744073709551615 1 = 37 79 37 80 18 1 0 37 81 37 82 18446744073709551615 1 ; 37 82 37 83 18446744073709551615 1 } 38 3 38 4 18446744073709551615 1 ; 38 4 38 5 18446744073709551615 5 class 40 3 40 8 18446744073709551615 4 King 40 9 40 13 23 1 : 40 14 40 15 18446744073709551615 6 public 40 16 40 22 18446744073709551615 5 Piece 40 23 40 28 12 1 { 40 29 40 30 18446744073709551615 6 public 41 3 41 9 18446744073709551615 1 : 41 9 41 10 18446744073709551615 4 King 42 5 42 9 23 1 ( 42 9 42 10 23 5 Color 42 10 42 15 2 5 color 42 16 42 21 24 1 ) 42 21 42 22 23 1 : 42 23 42 24 23 5 Piece 42 25 42 30 12 1 ( 42 30 42 31 12 5 color 42 31 42 36 24 1 ) 42 36 42 37 12 1 { 42 38 42 39 18446744073709551615 1 } 42 39 42 40 18446744073709551615 4 char 44 5 44 9 18446744073709551615 10 identifier 44 10 44 20 15 1 ( 44 20 44 21 15 1 ) 44 21 44 22 15 5 const 44 23 44 28 18446744073709551615 8 override 44 29 44 37 18446744073709551615 1 { 44 38 44 39 18446744073709551615 6 return 45 7 45 13 18446744073709551615 5 color 45 14 45 19 14 2 == 45 20 45 22 18446744073709551615 5 Color 45 23 45 28 2 2 :: 45 28 45 30 18446744073709551615 5 WHITE 45 30 45 35 3 1 ? 45 36 45 37 18446744073709551615 3 'K' 45 38 45 41 18446744073709551615 1 : 45 42 45 43 18446744073709551615 3 'k' 45 44 45 47 18446744073709551615 1 ; 45 47 45 48 18446744073709551615 1 } 46 5 46 6 18446744073709551615 6 string 48 5 48 11 6 4 type 48 12 48 16 17 1 ( 48 16 48 17 17 1 ) 48 17 48 18 17 5 const 48 19 48 24 18446744073709551615 8 override 48 25 48 33 18446744073709551615 1 { 48 34 48 35 18446744073709551615 6 return 49 7 49 13 18446744073709551615 12 color_string 49 14 49 26 16 1 ( 49 26 49 27 16 1 ) 49 27 49 28 16 1 + 49 29 49 30 25 7 " king" 49 31 49 38 18446744073709551615 1 ; 49 38 49 39 18446744073709551615 1 } 50 5 50 6 18446744073709551615 4 bool 52 5 52 9 18446744073709551615 10 valid_move 52 10 52 20 18 1 ( 52 20 52 21 18 3 int 52 21 52 24 18446744073709551615 6 from_x 52 25 52 31 26 1 , 52 31 52 32 18 3 int 52 33 52 36 18446744073709551615 6 from_y 52 37 52 43 27 1 , 52 43 52 44 18 3 int 52 45 52 48 18446744073709551615 4 to_x 52 49 52 53 28 1 , 52 53 52 54 18 3 int 52 55 52 58 18446744073709551615 4 to_y 52 59 52 63 29 1 ) 52 63 52 64 18 5 const 52 65 52 70 18446744073709551615 8 override 52 71 52 79 18446744073709551615 1 { 52 80 52 81 18446744073709551615 3 int 53 7 53 10 18446744073709551615 2 dx 53 11 53 13 30 1 = 53 14 53 15 18446744073709551615 3 abs 53 16 53 19 31 1 ( 53 19 53 20 31 6 from_x 53 20 53 26 26 1 - 53 27 53 28 18446744073709551615 4 to_x 53 29 53 33 28 1 ) 53 33 53 34 31 1 ; 53 34 53 35 18446744073709551615 3 int 54 7 54 10 18446744073709551615 2 dy 54 11 54 13 32 1 = 54 14 54 15 18446744073709551615 3 abs 54 16 54 19 31 1 ( 54 19 54 20 31 6 from_y 54 20 54 26 27 1 - 54 27 54 28 18446744073709551615 4 to_y 54 29 54 33 29 1 ) 54 33 54 34 31 1 ; 54 34 54 35 18446744073709551615 6 return 55 7 55 13 18446744073709551615 2 dx 55 14 55 16 30 2 <= 55 17 55 19 18446744073709551615 1 1 55 20 55 21 18446744073709551615 2 && 55 22 55 24 18446744073709551615 2 dy 55 25 55 27 32 2 <= 55 28 55 30 18446744073709551615 1 1 55 31 55 32 18446744073709551615 1 ; 55 32 55 33 18446744073709551615 1 } 56 5 56 6 18446744073709551615 1 } 57 3 57 4 18446744073709551615 1 ; 57 4 57 5 18446744073709551615 5 class 59 3 59 8 18446744073709551615 6 Knight 59 9 59 15 33 1 : 59 16 59 17 18446744073709551615 6 public 59 18 59 24 18446744073709551615 5 Piece 59 25 59 30 12 1 { 59 31 59 32 18446744073709551615 6 public 60 3 60 9 18446744073709551615 1 : 60 9 60 10 18446744073709551615 6 Knight 61 5 61 11 33 1 ( 61 11 61 12 33 5 Color 61 12 61 17 2 5 color 61 18 61 23 34 1 ) 61 23 61 24 33 1 : 61 25 61 26 33 5 Piece 61 27 61 32 12 1 ( 61 32 61 33 12 5 color 61 33 61 38 34 1 ) 61 38 61 39 12 1 { 61 40 61 41 18446744073709551615 1 } 61 41 61 42 18446744073709551615 4 char 63 5 63 9 18446744073709551615 10 identifier 63 10 63 20 15 1 ( 63 20 63 21 15 1 ) 63 21 63 22 15 5 const 63 23 63 28 18446744073709551615 8 override 63 29 63 37 18446744073709551615 1 { 63 38 63 39 18446744073709551615 6 return 64 7 64 13 18446744073709551615 5 color 64 14 64 19 14 2 == 64 20 64 22 18446744073709551615 5 Color 64 23 64 28 2 2 :: 64 28 64 30 18446744073709551615 5 WHITE 64 30 64 35 3 1 ? 64 36 64 37 18446744073709551615 3 'N' 64 38 64 41 18446744073709551615 1 : 64 42 64 43 18446744073709551615 3 'n' 64 44 64 47 18446744073709551615 1 ; 64 47 64 48 18446744073709551615 1 } 65 5 65 6 18446744073709551615 6 string 67 5 67 11 6 4 type 67 12 67 16 17 1 ( 67 16 67 17 17 1 ) 67 17 67 18 17 5 const 67 19 67 24 18446744073709551615 8 override 67 25 67 33 18446744073709551615 1 { 67 34 67 35 18446744073709551615 6 return 68 7 68 13 18446744073709551615 12 color_string 68 14 68 26 16 1 ( 68 26 68 27 16 1 ) 68 27 68 28 16 1 + 68 29 68 30 25 9 " knight" 68 31 68 40 18446744073709551615 1 ; 68 40 68 41 18446744073709551615 1 } 69 5 69 6 18446744073709551615 4 bool 71 5 71 9 18446744073709551615 10 valid_move 71 10 71 20 18 1 ( 71 20 71 21 18 3 int 71 21 71 24 18446744073709551615 6 from_x 71 25 71 31 35 1 , 71 31 71 32 18 3 int 71 33 71 36 18446744073709551615 6 from_y 71 37 71 43 36 1 , 71 43 71 44 18 3 int 71 45 71 48 18446744073709551615 4 to_x 71 49 71 53 37 1 , 71 53 71 54 18 3 int 71 55 71 58 18446744073709551615 4 to_y 71 59 71 63 38 1 ) 71 63 71 64 18 5 const 71 65 71 70 18446744073709551615 8 override 71 71 71 79 18446744073709551615 1 { 71 80 71 81 18446744073709551615 3 int 72 7 72 10 18446744073709551615 2 dx 72 11 72 13 39 1 = 72 14 72 15 18446744073709551615 3 abs 72 16 72 19 31 1 ( 72 19 72 20 31 6 from_x 72 20 72 26 35 1 - 72 27 72 28 18446744073709551615 4 to_x 72 29 72 33 37 1 ) 72 33 72 34 31 1 ; 72 34 72 35 18446744073709551615 3 int 73 7 73 10 18446744073709551615 2 dy 73 11 73 13 40 1 = 73 14 73 15 18446744073709551615 3 abs 73 16 73 19 31 1 ( 73 19 73 20 31 6 from_y 73 20 73 26 36 1 - 73 27 73 28 18446744073709551615 4 to_y 73 29 73 33 38 1 ) 73 33 73 34 31 1 ; 73 34 73 35 18446744073709551615 6 return 74 7 74 13 18446744073709551615 1 ( 74 14 74 15 18446744073709551615 2 dx 74 15 74 17 39 2 == 74 18 74 20 18446744073709551615 1 2 74 21 74 22 18446744073709551615 2 && 74 23 74 25 18446744073709551615 2 dy 74 26 74 28 40 2 == 74 29 74 31 18446744073709551615 1 1 74 32 74 33 18446744073709551615 1 ) 74 33 74 34 18446744073709551615 2 || 74 35 74 37 18446744073709551615 1 ( 74 38 74 39 18446744073709551615 2 dx 74 39 74 41 39 2 == 74 42 74 44 18446744073709551615 1 1 74 45 74 46 18446744073709551615 2 && 74 47 74 49 18446744073709551615 2 dy 74 50 74 52 40 2 == 74 53 74 55 18446744073709551615 1 2 74 56 74 57 18446744073709551615 1 ) 74 57 74 58 18446744073709551615 1 ; 74 58 74 59 18446744073709551615 1 } 75 5 75 6 18446744073709551615 1 } 76 3 76 4 18446744073709551615 1 ; 76 4 76 5 18446744073709551615 10 ChessBoard 78 3 78 13 1 1 ( 78 13 78 14 1 1 ) 78 14 78 15 1 1 { 78 16 78 17 18446744073709551615 57 // Initialize the squares stored in 8 columns and 8 rows: 79 5 79 62 18446744073709551615 7 squares 80 5 80 12 41 1 . 80 12 80 13 42 6 resize 80 13 80 19 42 1 ( 80 19 80 20 42 1 8 80 20 80 21 18446744073709551615 1 ) 80 21 80 22 42 1 ; 80 22 80 23 18446744073709551615 3 for 81 5 81 8 18446744073709551615 1 ( 81 9 81 10 18446744073709551615 4 auto 81 10 81 14 18446744073709551615 1 & 81 15 81 16 18446744073709551615 13 square_column 81 16 81 29 43 1 : 81 30 81 31 44 7 squares 81 32 81 39 41 1 ) 81 39 81 40 18446744073709551615 13 square_column 82 7 82 20 43 1 . 82 20 82 21 42 6 resize 82 21 82 27 42 1 ( 82 27 82 28 42 1 8 82 28 82 29 18446744073709551615 1 ) 82 29 82 30 42 1 ; 82 30 82 31 18446744073709551615 1 } 83 3 83 4 18446744073709551615 47 /// 8x8 squares occupied by 1 or 0 chess pieces 85 3 85 50 18446744073709551615 6 vector 86 3 86 9 45 1 < 86 9 86 10 18446744073709551615 6 vector 86 10 86 16 45 1 < 86 16 86 17 18446744073709551615 10 unique_ptr 86 17 86 27 46 1 < 86 27 86 28 18446744073709551615 5 Piece 86 28 86 33 12 2 >> 86 33 86 35 18446744073709551615 1 > 86 35 86 36 18446744073709551615 7 squares 86 37 86 44 41 1 ; 86 44 86 45 18446744073709551615 45 /// Move a chess piece if it is a valid move. 88 3 88 48 18446744073709551615 41 /// Does not test for check or checkmate. 89 3 89 44 18446744073709551615 4 bool 90 3 90 7 18446744073709551615 10 move_piece 90 8 90 18 47 1 ( 90 18 90 19 47 5 const 90 19 90 24 18446744073709551615 6 string 90 25 90 31 6 1 & 90 32 90 33 18446744073709551615 4 from 90 33 90 37 48 1 , 90 37 90 38 47 5 const 90 39 90 44 18446744073709551615 6 string 90 45 90 51 6 1 & 90 52 90 53 18446744073709551615 2 to 90 53 90 55 49 1 ) 90 55 90 56 47 1 { 90 57 90 58 18446744073709551615 3 int 91 5 91 8 18446744073709551615 6 from_x 91 9 91 15 50 1 = 91 16 91 17 18446744073709551615 4 from 91 18 91 22 48 1 [ 91 22 91 23 51 1 0 91 23 91 24 18446744073709551615 1 ] 91 24 91 25 51 1 - 91 26 91 27 18446744073709551615 3 'a' 91 28 91 31 18446744073709551615 1 ; 91 31 91 32 18446744073709551615 3 int 92 5 92 8 18446744073709551615 6 from_y 92 9 92 15 52 1 = 92 16 92 17 18446744073709551615 4 stoi 92 18 92 22 53 1 ( 92 22 92 23 53 6 string 92 23 92 29 6 1 ( 92 29 92 30 54 1 ) 92 30 92 31 54 1 + 92 32 92 33 25 4 from 92 34 92 38 48 1 [ 92 38 92 39 51 1 1 92 39 92 40 18446744073709551615 1 ] 92 40 92 41 51 1 ) 92 41 92 42 53 1 - 92 43 92 44 18446744073709551615 1 1 92 45 92 46 18446744073709551615 1 ; 92 46 92 47 18446744073709551615 3 int 93 5 93 8 18446744073709551615 4 to_x 93 9 93 13 55 1 = 93 14 93 15 18446744073709551615 2 to 93 16 93 18 49 1 [ 93 18 93 19 51 1 0 93 19 93 20 18446744073709551615 1 ] 93 20 93 21 51 1 - 93 22 93 23 18446744073709551615 3 'a' 93 24 93 27 18446744073709551615 1 ; 93 27 93 28 18446744073709551615 3 int 94 5 94 8 18446744073709551615 4 to_y 94 9 94 13 56 1 = 94 14 94 15 18446744073709551615 4 stoi 94 16 94 20 53 1 ( 94 20 94 21 53 6 string 94 21 94 27 6 1 ( 94 27 94 28 54 1 ) 94 28 94 29 54 1 + 94 30 94 31 25 2 to 94 32 94 34 49 1 [ 94 34 94 35 51 1 1 94 35 94 36 18446744073709551615 1 ] 94 36 94 37 51 1 ) 94 37 94 38 53 1 - 94 39 94 40 18446744073709551615 1 1 94 41 94 42 18446744073709551615 1 ; 94 42 94 43 18446744073709551615 4 auto 96 5 96 9 18446744073709551615 1 & 96 10 96 11 18446744073709551615 10 piece_from 96 11 96 21 57 1 = 96 22 96 23 18446744073709551615 7 squares 96 24 96 31 41 1 [ 96 31 96 32 58 6 from_x 96 32 96 38 50 1 ] 96 38 96 39 58 1 [ 96 39 96 40 58 6 from_y 96 40 96 46 52 1 ] 96 46 96 47 58 1 ; 96 47 96 48 18446744073709551615 2 if 97 5 97 7 18446744073709551615 1 ( 97 8 97 9 18446744073709551615 10 piece_from 97 9 97 19 57 1 ) 97 19 97 20 18446744073709551615 1 { 97 21 97 22 18446744073709551615 2 if 98 7 98 9 18446744073709551615 1 ( 98 10 98 11 18446744073709551615 10 piece_from 98 11 98 21 57 2 -> 98 21 98 23 59 10 valid_move 98 23 98 33 18 1 ( 98 33 98 34 18 6 from_x 98 34 98 40 50 1 , 98 40 98 41 18 6 from_y 98 42 98 48 52 1 , 98 48 98 49 18 4 to_x 98 50 98 54 55 1 , 98 54 98 55 18 4 to_y 98 56 98 60 56 1 ) 98 60 98 61 18 1 ) 98 61 98 62 18446744073709551615 1 { 98 63 98 64 18446744073709551615 16 after_piece_move 99 9 99 25 8 1 ( 99 25 99 26 60 10 piece_from 99 26 99 36 57 2 -> 99 36 99 38 59 4 type 99 38 99 42 17 1 ( 99 42 99 43 17 1 ) 99 43 99 44 17 1 , 99 44 99 45 60 4 from 99 46 99 50 48 1 , 99 50 99 51 60 2 to 99 52 99 54 49 1 ) 99 54 99 55 60 1 ; 99 55 99 56 18446744073709551615 4 auto 100 9 100 13 18446744073709551615 1 & 100 14 100 15 18446744073709551615 8 piece_to 100 15 100 23 61 1 = 100 24 100 25 18446744073709551615 7 squares 100 26 100 33 41 1 [ 100 33 100 34 58 4 to_x 100 34 100 38 55 1 ] 100 38 100 39 58 1 [ 100 39 100 40 58 4 to_y 100 40 100 44 56 1 ] 100 44 100 45 58 1 ; 100 45 100 46 18446744073709551615 2 if 101 9 101 11 18446744073709551615 1 ( 101 12 101 13 18446744073709551615 8 piece_to 101 13 101 21 61 1 ) 101 21 101 22 18446744073709551615 1 { 101 23 101 24 18446744073709551615 2 if 102 11 102 13 18446744073709551615 1 ( 102 14 102 15 18446744073709551615 10 piece_from 102 15 102 25 57 2 -> 102 25 102 27 59 5 color 102 27 102 32 14 2 != 102 33 102 35 18446744073709551615 8 piece_to 102 36 102 44 61 2 -> 102 44 102 46 59 5 color 102 46 102 51 14 1 ) 102 51 102 52 18446744073709551615 1 { 102 53 102 54 18446744073709551615 12 remove_piece 103 13 103 25 9 1 ( 103 25 103 26 60 8 piece_to 103 26 103 34 61 2 -> 103 34 103 36 59 4 type 103 36 103 40 17 1 ( 103 40 103 41 17 1 ) 103 41 103 42 17 1 , 103 42 103 43 60 2 to 103 44 103 46 49 1 ) 103 46 103 47 60 1 ; 103 47 103 48 18446744073709551615 2 if 104 13 104 15 18446744073709551615 1 ( 104 16 104 17 18446744073709551615 4 auto 104 17 104 21 18446744073709551615 4 king 104 22 104 26 62 1 = 104 27 104 28 18446744073709551615 12 dynamic_cast 104 29 104 41 18446744073709551615 1 < 104 41 104 42 18446744073709551615 4 King 104 42 104 46 23 1 * 104 47 104 48 18446744073709551615 1 > 104 48 104 49 18446744073709551615 1 ( 104 49 104 50 18446744073709551615 8 piece_to 104 50 104 58 61 1 . 104 58 104 59 63 3 get 104 59 104 62 63 1 ( 104 62 104 63 63 1 ) 104 63 104 64 63 1 ) 104 64 104 65 18446744073709551615 1 ) 104 65 104 66 18446744073709551615 9 game_over 105 15 105 24 10 1 ( 105 24 105 25 60 4 king 105 25 105 29 62 2 -> 105 29 105 31 16 12 color_string 105 31 105 43 16 1 ( 105 43 105 44 16 1 ) 105 44 105 45 16 1 ) 105 45 105 46 60 1 ; 105 46 105 47 18446744073709551615 1 } 106 11 106 12 18446744073709551615 4 else 106 13 106 17 18446744073709551615 1 { 106 18 106 19 18446744073709551615 76 // piece in the from square has the same color as the piece in the to square 107 13 107 89 18446744073709551615 18 after_invalid_move 108 13 108 31 7 1 ( 108 31 108 32 60 10 piece_from 108 32 108 42 57 2 -> 108 42 108 44 59 4 type 108 44 108 48 17 1 ( 108 48 108 49 17 1 ) 108 49 108 50 17 1 , 108 50 108 51 60 4 from 108 52 108 56 48 1 , 108 56 108 57 60 2 to 108 58 108 60 49 1 ) 108 60 108 61 60 1 ; 108 61 108 62 18446744073709551615 6 return 109 13 109 19 18446744073709551615 5 false 109 20 109 25 18446744073709551615 1 ; 109 25 109 26 18446744073709551615 1 } 110 11 110 12 18446744073709551615 1 } 111 9 111 10 18446744073709551615 8 piece_to 112 9 112 17 61 1 = 112 18 112 19 64 4 move 112 20 112 24 65 1 ( 112 24 112 25 65 10 piece_from 112 25 112 35 57 1 ) 112 35 112 36 65 1 ; 112 36 112 37 18446744073709551615 6 return 113 9 113 15 18446744073709551615 4 true 113 16 113 20 18446744073709551615 1 ; 113 20 113 21 18446744073709551615 1 } 114 7 114 8 18446744073709551615 4 else 114 9 114 13 18446744073709551615 1 { 114 14 114 15 18446744073709551615 18 after_invalid_move 115 9 115 27 7 1 ( 115 27 115 28 60 10 piece_from 115 28 115 38 57 2 -> 115 38 115 40 59 4 type 115 40 115 44 17 1 ( 115 44 115 45 17 1 ) 115 45 115 46 17 1 , 115 46 115 47 60 4 from 115 48 115 52 48 1 , 115 52 115 53 60 2 to 115 54 115 56 49 1 ) 115 56 115 57 60 1 ; 115 57 115 58 18446744073709551615 6 return 116 9 116 15 18446744073709551615 5 false 116 16 116 21 18446744073709551615 1 ; 116 21 116 22 18446744073709551615 1 } 117 7 117 8 18446744073709551615 1 } 118 5 118 6 18446744073709551615 4 else 118 7 118 11 18446744073709551615 1 { 118 12 118 13 18446744073709551615 8 no_piece 119 7 119 15 11 1 ( 119 15 119 16 60 4 from 119 16 119 20 48 1 ) 119 20 119 21 60 1 ; 119 21 119 22 18446744073709551615 6 return 120 7 120 13 18446744073709551615 5 false 120 14 120 19 18446744073709551615 1 ; 120 19 120 20 18446744073709551615 1 } 121 5 121 6 18446744073709551615 1 } 122 3 122 4 18446744073709551615 1 } 123 1 123 2 18446744073709551615 1 ; 123 2 123 3 18446744073709551615 5 class 125 1 125 6 18446744073709551615 15 ChessBoardPrint 125 7 125 22 66 1 { 125 23 125 24 18446744073709551615 7 private 126 1 126 8 18446744073709551615 1 : 126 8 126 9 18446744073709551615 10 ChessBoard 127 3 127 13 1 1 & 127 14 127 15 18446744073709551615 5 board 127 15 127 20 67 1 ; 127 20 127 21 18446744073709551615 6 public 129 1 129 7 18446744073709551615 1 : 129 7 129 8 18446744073709551615 15 ChessBoardPrint 130 3 130 18 66 1 ( 130 18 130 19 66 10 ChessBoard 130 19 130 29 1 1 & 130 30 130 31 18446744073709551615 5 board 130 31 130 36 68 1 ) 130 36 130 37 66 1 : 130 38 130 39 66 5 board 130 40 130 45 67 1 ( 130 45 130 46 66 5 board 130 46 130 51 68 1 ) 130 51 130 52 66 1 { 130 53 130 54 18446744073709551615 5 board 131 5 131 10 68 1 . 131 10 131 11 18446744073709551615 18 after_invalid_move 131 11 131 29 7 1 = 131 30 131 31 69 1 [ 131 32 131 33 18446744073709551615 1 ] 131 33 131 34 18446744073709551615 1 ( 131 34 131 35 18446744073709551615 5 const 131 35 131 40 18446744073709551615 6 string 131 41 131 47 6 1 & 131 48 131 49 18446744073709551615 4 type 131 49 131 53 70 1 , 131 53 131 54 18446744073709551615 5 const 131 55 131 60 18446744073709551615 6 string 131 61 131 67 6 1 & 131 68 131 69 18446744073709551615 4 from 131 69 131 73 71 1 , 131 73 131 74 18446744073709551615 5 const 131 75 131 80 18446744073709551615 6 string 131 81 131 87 6 1 & 131 88 131 89 18446744073709551615 2 to 131 89 131 91 72 1 ) 131 91 131 92 18446744073709551615 1 { 131 93 131 94 18446744073709551615 4 cout 132 7 132 11 73 2 << 132 12 132 14 74 15 "can not move " 132 15 132 30 18446744073709551615 2 << 132 31 132 33 74 4 type 132 34 132 38 70 2 << 132 39 132 41 74 8 " from " 132 42 132 50 18446744073709551615 2 << 132 51 132 53 74 4 from 132 54 132 58 71 2 << 132 59 132 61 74 6 " to " 132 62 132 68 18446744073709551615 2 << 132 69 132 71 74 2 to 132 72 132 74 72 2 << 132 75 132 77 75 4 endl 132 78 132 82 76 1 ; 132 82 132 83 18446744073709551615 1 } 133 5 133 6 18446744073709551615 1 ; 133 6 133 7 18446744073709551615 5 board 135 5 135 10 68 1 . 135 10 135 11 18446744073709551615 8 no_piece 135 11 135 19 11 1 = 135 20 135 21 69 1 [ 135 22 135 23 18446744073709551615 1 ] 135 23 135 24 18446744073709551615 1 ( 135 24 135 25 18446744073709551615 5 const 135 25 135 30 18446744073709551615 6 string 135 31 135 37 6 1 & 135 38 135 39 18446744073709551615 4 from 135 39 135 43 77 1 ) 135 43 135 44 18446744073709551615 1 { 135 45 135 46 18446744073709551615 4 cout 136 7 136 11 73 2 << 136 12 136 14 74 14 "no piece at " 136 15 136 29 18446744073709551615 2 << 136 30 136 32 74 4 from 136 33 136 37 77 2 << 136 38 136 40 75 4 endl 136 41 136 45 76 1 ; 136 45 136 46 18446744073709551615 1 } 137 5 137 6 18446744073709551615 1 ; 137 6 137 7 18446744073709551615 5 board 139 5 139 10 68 1 . 139 10 139 11 18446744073709551615 16 after_piece_move 139 11 139 27 8 1 = 139 28 139 29 69 1 [ 139 30 139 31 18446744073709551615 4 this 139 31 139 35 18446744073709551615 1 ] 139 35 139 36 18446744073709551615 1 ( 139 36 139 37 18446744073709551615 5 const 139 37 139 42 18446744073709551615 6 string 139 43 139 49 6 1 & 139 50 139 51 18446744073709551615 4 type 139 51 139 55 78 1 , 139 55 139 56 18446744073709551615 5 const 139 57 139 62 18446744073709551615 6 string 139 63 139 69 6 1 & 139 70 139 71 18446744073709551615 4 from 139 71 139 75 79 1 , 139 75 139 76 18446744073709551615 5 const 139 77 139 82 18446744073709551615 6 string 139 83 139 89 6 1 & 139 90 139 91 18446744073709551615 2 to 139 91 139 93 80 1 ) 139 93 139 94 18446744073709551615 1 { 139 95 139 96 18446744073709551615 4 cout 140 7 140 11 73 2 << 140 12 140 14 74 4 type 140 15 140 19 78 2 << 140 20 140 22 74 18 " is moving from " 140 23 140 41 18446744073709551615 2 << 140 42 140 44 74 4 from 140 45 140 49 79 2 << 140 50 140 52 74 6 " to " 140 53 140 59 18446744073709551615 2 << 140 60 140 62 74 2 to 140 63 140 65 80 2 << 140 66 140 68 75 4 endl 140 69 140 73 76 1 ; 140 73 140 74 18446744073709551615 11 print_board 141 7 141 18 81 1 ( 141 18 141 19 81 1 ) 141 19 141 20 81 1 ; 141 20 141 21 18446744073709551615 1 } 142 5 142 6 18446744073709551615 1 ; 142 6 142 7 18446744073709551615 5 board 144 5 144 10 68 1 . 144 10 144 11 18446744073709551615 12 remove_piece 144 11 144 23 9 1 = 144 24 144 25 69 1 [ 144 26 144 27 18446744073709551615 1 ] 144 27 144 28 18446744073709551615 1 ( 144 28 144 29 18446744073709551615 5 const 144 29 144 34 18446744073709551615 6 string 144 35 144 41 6 1 & 144 42 144 43 18446744073709551615 4 type 144 43 144 47 82 1 , 144 47 144 48 18446744073709551615 5 const 144 49 144 54 18446744073709551615 6 string 144 55 144 61 6 1 & 144 62 144 63 18446744073709551615 2 to 144 63 144 65 83 1 ) 144 65 144 66 18446744073709551615 1 { 144 67 144 68 18446744073709551615 4 cout 145 7 145 11 73 2 << 145 12 145 14 74 4 type 145 15 145 19 82 2 << 145 20 145 22 74 25 " is being removed from " 145 23 145 48 18446744073709551615 2 << 145 49 145 51 74 2 to 145 52 145 54 83 2 << 145 55 145 57 75 4 endl 145 58 145 62 76 1 ; 145 62 145 63 18446744073709551615 1 } 146 5 146 6 18446744073709551615 1 ; 146 6 146 7 18446744073709551615 5 board 148 5 148 10 68 1 . 148 10 148 11 18446744073709551615 9 game_over 148 11 148 20 10 1 = 148 21 148 22 69 1 [ 148 23 148 24 18446744073709551615 1 ] 148 24 148 25 18446744073709551615 1 ( 148 25 148 26 18446744073709551615 5 const 148 26 148 31 18446744073709551615 6 string 148 32 148 38 6 1 & 148 39 148 40 18446744073709551615 12 color_string 148 40 148 52 84 1 ) 148 52 148 53 18446744073709551615 1 { 148 54 148 55 18446744073709551615 4 cout 149 7 149 11 73 2 << 149 12 149 14 74 12 color_string 149 15 149 27 84 2 << 149 28 149 30 74 16 " lost the game" 149 31 149 47 18446744073709551615 2 << 149 48 149 50 75 4 endl 149 51 149 55 76 1 ; 149 55 149 56 18446744073709551615 1 } 150 5 150 6 18446744073709551615 1 ; 150 6 150 7 18446744073709551615 1 } 151 3 151 4 18446744073709551615 4 void 152 3 152 7 18446744073709551615 11 print_board 152 8 152 19 81 1 ( 152 19 152 20 81 1 ) 152 20 152 21 81 1 { 152 22 152 23 18446744073709551615 3 for 153 5 153 8 18446744073709551615 1 ( 153 9 153 10 18446744073709551615 3 int 153 10 153 13 18446744073709551615 1 y 153 14 153 15 85 1 = 153 16 153 17 18446744073709551615 1 7 153 18 153 19 18446744073709551615 1 ; 153 19 153 20 18446744073709551615 1 y 153 21 153 22 85 2 >= 153 23 153 25 18446744073709551615 1 0 153 26 153 27 18446744073709551615 1 ; 153 27 153 28 18446744073709551615 2 -- 153 29 153 31 18446744073709551615 1 y 153 31 153 32 85 1 ) 153 32 153 33 18446744073709551615 1 { 153 34 153 35 18446744073709551615 3 for 154 7 154 10 18446744073709551615 1 ( 154 11 154 12 18446744073709551615 3 int 154 12 154 15 18446744073709551615 1 x 154 16 154 17 86 1 = 154 18 154 19 18446744073709551615 1 0 154 20 154 21 18446744073709551615 1 ; 154 21 154 22 18446744073709551615 1 x 154 23 154 24 86 1 < 154 25 154 26 18446744073709551615 1 8 154 27 154 28 18446744073709551615 1 ; 154 28 154 29 18446744073709551615 2 ++ 154 30 154 32 18446744073709551615 1 x 154 32 154 33 86 1 ) 154 33 154 34 18446744073709551615 1 { 154 35 154 36 18446744073709551615 2 if 155 9 155 11 18446744073709551615 1 ( 155 12 155 13 18446744073709551615 5 board 155 13 155 18 67 1 . 155 18 155 19 18446744073709551615 7 squares 155 19 155 26 41 1 [ 155 26 155 27 58 1 x 155 27 155 28 86 1 ] 155 28 155 29 58 1 [ 155 29 155 30 58 1 y 155 30 155 31 85 1 ] 155 31 155 32 58 1 ) 155 32 155 33 18446744073709551615 1 { 155 34 155 35 18446744073709551615 4 cout 156 11 156 15 73 2 << 156 16 156 18 74 5 board 156 19 156 24 67 1 . 156 24 156 25 18446744073709551615 7 squares 156 25 156 32 41 1 [ 156 32 156 33 58 1 x 156 33 156 34 86 1 ] 156 34 156 35 58 1 [ 156 35 156 36 58 1 y 156 36 156 37 85 1 ] 156 37 156 38 58 2 -> 156 38 156 40 59 10 identifier 156 40 156 50 15 1 ( 156 50 156 51 15 1 ) 156 51 156 52 15 2 << 156 53 156 55 74 3 ' ' 156 56 156 59 18446744073709551615 1 ; 156 59 156 60 18446744073709551615 1 } 157 9 157 10 18446744073709551615 4 else 157 11 157 15 18446744073709551615 1 { 157 16 157 17 18446744073709551615 4 cout 158 11 158 15 73 2 << 158 16 158 18 74 4 ". " 158 19 158 23 18446744073709551615 1 ; 158 23 158 24 18446744073709551615 1 } 159 9 159 10 18446744073709551615 1 } 160 7 160 8 18446744073709551615 4 cout 161 7 161 11 73 2 << 161 12 161 14 75 4 endl 161 15 161 19 76 1 ; 161 19 161 20 18446744073709551615 1 } 162 5 162 6 18446744073709551615 1 } 163 3 163 4 18446744073709551615 1 } 164 1 164 2 18446744073709551615 1 ; 164 2 164 3 18446744073709551615 3 int 166 1 166 4 18446744073709551615 4 main 166 5 166 9 87 1 ( 166 9 166 10 87 1 ) 166 10 166 11 87 1 { 166 12 166 13 18446744073709551615 10 ChessBoard 167 3 167 13 1 5 board 167 14 167 19 88 1 ; 167 19 167 20 18446744073709551615 15 ChessBoardPrint 168 3 168 18 66 5 print 168 19 168 24 89 1 ( 168 24 168 25 66 5 board 168 25 168 30 88 1 ) 168 30 168 31 66 1 ; 168 31 168 32 18446744073709551615 5 board 170 3 170 8 88 1 . 170 8 170 9 18446744073709551615 7 squares 170 9 170 16 41 1 [ 170 16 170 17 58 1 4 170 17 170 18 18446744073709551615 1 ] 170 18 170 19 58 1 [ 170 19 170 20 58 1 0 170 20 170 21 18446744073709551615 1 ] 170 21 170 22 58 1 = 170 23 170 24 64 11 make_unique 170 25 170 36 90 1 < 170 36 170 37 90 10 ChessBoard 170 37 170 47 1 2 :: 170 47 170 49 90 4 King 170 49 170 53 23 1 > 170 53 170 54 90 1 ( 170 54 170 55 90 10 ChessBoard 170 55 170 65 1 2 :: 170 65 170 67 18446744073709551615 5 Color 170 67 170 72 2 2 :: 170 72 170 74 18446744073709551615 5 WHITE 170 74 170 79 3 1 ) 170 79 170 80 90 1 ; 170 80 170 81 18446744073709551615 5 board 171 3 171 8 88 1 . 171 8 171 9 18446744073709551615 7 squares 171 9 171 16 41 1 [ 171 16 171 17 58 1 1 171 17 171 18 18446744073709551615 1 ] 171 18 171 19 58 1 [ 171 19 171 20 58 1 0 171 20 171 21 18446744073709551615 1 ] 171 21 171 22 58 1 = 171 23 171 24 64 11 make_unique 171 25 171 36 90 1 < 171 36 171 37 90 10 ChessBoard 171 37 171 47 1 2 :: 171 47 171 49 90 6 Knight 171 49 171 55 33 1 > 171 55 171 56 90 1 ( 171 56 171 57 90 10 ChessBoard 171 57 171 67 1 2 :: 171 67 171 69 18446744073709551615 5 Color 171 69 171 74 2 2 :: 171 74 171 76 18446744073709551615 5 WHITE 171 76 171 81 3 1 ) 171 81 171 82 90 1 ; 171 82 171 83 18446744073709551615 5 board 172 3 172 8 88 1 . 172 8 172 9 18446744073709551615 7 squares 172 9 172 16 41 1 [ 172 16 172 17 58 1 6 172 17 172 18 18446744073709551615 1 ] 172 18 172 19 58 1 [ 172 19 172 20 58 1 0 172 20 172 21 18446744073709551615 1 ] 172 21 172 22 58 1 = 172 23 172 24 64 11 make_unique 172 25 172 36 90 1 < 172 36 172 37 90 10 ChessBoard 172 37 172 47 1 2 :: 172 47 172 49 90 6 Knight 172 49 172 55 33 1 > 172 55 172 56 90 1 ( 172 56 172 57 90 10 ChessBoard 172 57 172 67 1 2 :: 172 67 172 69 18446744073709551615 5 Color 172 69 172 74 2 2 :: 172 74 172 76 18446744073709551615 5 WHITE 172 76 172 81 3 1 ) 172 81 172 82 90 1 ; 172 82 172 83 18446744073709551615 5 board 174 3 174 8 88 1 . 174 8 174 9 18446744073709551615 7 squares 174 9 174 16 41 1 [ 174 16 174 17 58 1 4 174 17 174 18 18446744073709551615 1 ] 174 18 174 19 58 1 [ 174 19 174 20 58 1 7 174 20 174 21 18446744073709551615 1 ] 174 21 174 22 58 1 = 174 23 174 24 64 11 make_unique 174 25 174 36 90 1 < 174 36 174 37 90 10 ChessBoard 174 37 174 47 1 2 :: 174 47 174 49 90 4 King 174 49 174 53 23 1 > 174 53 174 54 90 1 ( 174 54 174 55 90 10 ChessBoard 174 55 174 65 1 2 :: 174 65 174 67 18446744073709551615 5 Color 174 67 174 72 2 2 :: 174 72 174 74 18446744073709551615 5 BLACK 174 74 174 79 4 1 ) 174 79 174 80 90 1 ; 174 80 174 81 18446744073709551615 5 board 175 3 175 8 88 1 . 175 8 175 9 18446744073709551615 7 squares 175 9 175 16 41 1 [ 175 16 175 17 58 1 1 175 17 175 18 18446744073709551615 1 ] 175 18 175 19 58 1 [ 175 19 175 20 58 1 7 175 20 175 21 18446744073709551615 1 ] 175 21 175 22 58 1 = 175 23 175 24 64 11 make_unique 175 25 175 36 90 1 < 175 36 175 37 90 10 ChessBoard 175 37 175 47 1 2 :: 175 47 175 49 90 6 Knight 175 49 175 55 33 1 > 175 55 175 56 90 1 ( 175 56 175 57 90 10 ChessBoard 175 57 175 67 1 2 :: 175 67 175 69 18446744073709551615 5 Color 175 69 175 74 2 2 :: 175 74 175 76 18446744073709551615 5 BLACK 175 76 175 81 4 1 ) 175 81 175 82 90 1 ; 175 82 175 83 18446744073709551615 5 board 176 3 176 8 88 1 . 176 8 176 9 18446744073709551615 7 squares 176 9 176 16 41 1 [ 176 16 176 17 58 1 6 176 17 176 18 18446744073709551615 1 ] 176 18 176 19 58 1 [ 176 19 176 20 58 1 7 176 20 176 21 18446744073709551615 1 ] 176 21 176 22 58 1 = 176 23 176 24 64 11 make_unique 176 25 176 36 90 1 < 176 36 176 37 90 10 ChessBoard 176 37 176 47 1 2 :: 176 47 176 49 90 6 Knight 176 49 176 55 33 1 > 176 55 176 56 90 1 ( 176 56 176 57 90 10 ChessBoard 176 57 176 67 1 2 :: 176 67 176 69 18446744073709551615 5 Color 176 69 176 74 2 2 :: 176 74 176 76 18446744073709551615 5 BLACK 176 76 176 81 4 1 ) 176 81 176 82 90 1 ; 176 82 176 83 18446744073709551615 4 cout 178 3 178 7 73 2 << 178 8 178 10 74 16 "Invalid moves:" 178 11 178 27 18446744073709551615 2 << 178 28 178 30 75 4 endl 178 31 178 35 76 1 ; 178 35 178 36 18446744073709551615 5 board 179 3 179 8 88 1 . 179 8 179 9 47 10 move_piece 179 9 179 19 47 1 ( 179 19 179 20 47 4 "e3" 179 20 179 24 18446744073709551615 1 , 179 24 179 25 47 4 "e2" 179 26 179 30 18446744073709551615 1 ) 179 30 179 31 47 1 ; 179 31 179 32 18446744073709551615 5 board 180 3 180 8 88 1 . 180 8 180 9 47 10 move_piece 180 9 180 19 47 1 ( 180 19 180 20 47 4 "e1" 180 20 180 24 18446744073709551615 1 , 180 24 180 25 47 4 "e3" 180 26 180 30 18446744073709551615 1 ) 180 30 180 31 47 1 ; 180 31 180 32 18446744073709551615 5 board 181 3 181 8 88 1 . 181 8 181 9 47 10 move_piece 181 9 181 19 47 1 ( 181 19 181 20 47 4 "b1" 181 20 181 24 18446744073709551615 1 , 181 24 181 25 47 4 "b2" 181 26 181 30 18446744073709551615 1 ) 181 30 181 31 47 1 ; 181 31 181 32 18446744073709551615 4 cout 182 3 182 7 73 2 << 182 8 182 10 75 4 endl 182 11 182 15 76 1 ; 182 15 182 16 18446744073709551615 4 cout 184 3 184 7 73 2 << 184 8 184 10 74 19 "A simulated game:" 184 11 184 30 18446744073709551615 2 << 184 31 184 33 75 4 endl 184 34 184 38 76 1 ; 184 38 184 39 18446744073709551615 5 board 185 3 185 8 88 1 . 185 8 185 9 47 10 move_piece 185 9 185 19 47 1 ( 185 19 185 20 47 4 "e1" 185 20 185 24 18446744073709551615 1 , 185 24 185 25 47 4 "e2" 185 26 185 30 18446744073709551615 1 ) 185 30 185 31 47 1 ; 185 31 185 32 18446744073709551615 5 board 186 3 186 8 88 1 . 186 8 186 9 47 10 move_piece 186 9 186 19 47 1 ( 186 19 186 20 47 4 "g8" 186 20 186 24 18446744073709551615 1 , 186 24 186 25 47 4 "h6" 186 26 186 30 18446744073709551615 1 ) 186 30 186 31 47 1 ; 186 31 186 32 18446744073709551615 5 board 187 3 187 8 88 1 . 187 8 187 9 47 10 move_piece 187 9 187 19 47 1 ( 187 19 187 20 47 4 "b1" 187 20 187 24 18446744073709551615 1 , 187 24 187 25 47 4 "c3" 187 26 187 30 18446744073709551615 1 ) 187 30 187 31 47 1 ; 187 31 187 32 18446744073709551615 5 board 188 3 188 8 88 1 . 188 8 188 9 47 10 move_piece 188 9 188 19 47 1 ( 188 19 188 20 47 4 "h6" 188 20 188 24 18446744073709551615 1 , 188 24 188 25 47 4 "g8" 188 26 188 30 18446744073709551615 1 ) 188 30 188 31 47 1 ; 188 31 188 32 18446744073709551615 5 board 189 3 189 8 88 1 . 189 8 189 9 47 10 move_piece 189 9 189 19 47 1 ( 189 19 189 20 47 4 "c3" 189 20 189 24 18446744073709551615 1 , 189 24 189 25 47 4 "d5" 189 26 189 30 18446744073709551615 1 ) 189 30 189 31 47 1 ; 189 31 189 32 18446744073709551615 5 board 190 3 190 8 88 1 . 190 8 190 9 47 10 move_piece 190 9 190 19 47 1 ( 190 19 190 20 47 4 "g8" 190 20 190 24 18446744073709551615 1 , 190 24 190 25 47 4 "h6" 190 26 190 30 18446744073709551615 1 ) 190 30 190 31 47 1 ; 190 31 190 32 18446744073709551615 5 board 191 3 191 8 88 1 . 191 8 191 9 47 10 move_piece 191 9 191 19 47 1 ( 191 19 191 20 47 4 "d5" 191 20 191 24 18446744073709551615 1 , 191 24 191 25 47 4 "f6" 191 26 191 30 18446744073709551615 1 ) 191 30 191 31 47 1 ; 191 31 191 32 18446744073709551615 5 board 192 3 192 8 88 1 . 192 8 192 9 47 10 move_piece 192 9 192 19 47 1 ( 192 19 192 20 47 4 "h6" 192 20 192 24 18446744073709551615 1 , 192 24 192 25 47 4 "g8" 192 26 192 30 18446744073709551615 1 ) 192 30 192 31 47 1 ; 192 31 192 32 18446744073709551615 5 board 193 3 193 8 88 1 . 193 8 193 9 47 10 move_piece 193 9 193 19 47 1 ( 193 19 193 20 47 4 "f6" 193 20 193 24 18446744073709551615 1 , 193 24 193 25 47 4 "e8" 193 26 193 30 18446744073709551615 1 ) 193 30 193 31 47 1 ; 193 31 193 32 18446744073709551615 1 } 194 1 194 2 18446744073709551615 0 0 91 0 0 0 22 0 0 1 13 0 3 std 4 1 13 0 10 ChessBoard 5 1 13 0 16 Color:ChessBoard 7 1 13 0 22 WHITE:Color:ChessBoard 7 1 13 0 22 BLACK:Color:ChessBoard 31 1 13 0 12 function:std 20 1 13 0 10 string:std 6 1 13 0 29 after_invalid_move:ChessBoard 6 1 13 0 27 after_piece_move:ChessBoard 6 1 13 0 23 remove_piece:ChessBoard 6 1 13 0 20 game_over:ChessBoard 6 1 13 0 19 no_piece:ChessBoard 4 1 13 0 16 Piece:ChessBoard 10 1 13 0 109 21:17:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 6 1 13 0 22 color:Piece:ChessBoard 21 1 13 0 27 identifier:Piece:ChessBoard 21 1 13 0 29 color_string:Piece:ChessBoard 21 1 13 0 21 type:Piece:ChessBoard 21 1 13 0 27 valid_move:Piece:ChessBoard 10 1 13 0 109 37:33:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 109 37:45:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 109 37:57:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 109 37:67:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 4 1 13 0 15 King:ChessBoard 10 1 13 0 109 42:16:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 8 1 13 0 13 operator+:std 10 1 13 0 109 52:25:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 109 52:37:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 109 52:49:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 109 52:59:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 9 1 13 0 109 53:11:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 8 1 13 0 3 abs 9 1 13 0 109 54:11:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 4 1 13 0 17 Knight:ChessBoard 10 1 13 0 109 61:18:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 109 71:25:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 109 71:37:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 109 71:49:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 109 71:59:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 9 1 13 0 109 72:11:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 9 1 13 0 109 73:11:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 6 1 13 0 18 squares:ChessBoard 21 1 13 0 17 resize:vector:std 9 1 13 0 109 81:16:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 21 1 13 0 37 operator*:__normal_iterator:__gnu_cxx 31 1 13 0 10 vector:std 31 1 13 0 14 unique_ptr:std 21 1 13 0 21 move_piece:ChessBoard 10 1 13 0 109 90:33:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 109 90:53:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 9 1 13 0 108 91:9:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 21 1 13 0 35 operator[]:basic_string:__cxx11:std 9 1 13 0 108 92:9:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 8 1 13 0 16 stoi:__cxx11:std 24 1 13 0 24 basic_string:__cxx11:std 9 1 13 0 108 93:9:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 9 1 13 0 108 94:9:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 9 1 13 0 109 96:11:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 21 1 13 0 21 operator[]:vector:std 21 1 13 0 25 operator->:unique_ptr:std 21 1 13 0 21 operator:function:std 9 1 13 0 110 100:15:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 9 1 13 0 110 104:22:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 21 1 13 0 18 get:unique_ptr:std 21 1 13 0 24 operator=:unique_ptr:std 8 1 13 0 8 move:std 4 1 13 0 15 ChessBoardPrint 6 1 13 0 21 board:ChessBoardPrint 10 1 13 0 110 130:31:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 21 1 13 0 22 operator=:function:std 10 1 13 0 110 131:49:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 110 131:69:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 110 131:89:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 9 1 13 0 8 cout:std 8 1 13 0 12 operator:std 21 1 13 0 26 operator:basic_ostream:std 8 1 13 0 8 endl:std 10 1 13 0 110 135:39:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 110 139:51:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 110 139:71:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 110 139:91:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 21 1 13 0 27 print_board:ChessBoardPrint 10 1 13 0 110 144:43:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 110 144:63:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 10 1 13 0 110 148:40:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 9 1 13 0 110 153:14:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 9 1 13 0 110 154:16:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 8 1 13 0 4 main 9 1 13 0 110 167:14:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 9 1 13 0 110 168:19:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 8 1 13 0 15 make_unique:std 0 0 1 0 0 0 103 H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\chess.cpp 1699407178
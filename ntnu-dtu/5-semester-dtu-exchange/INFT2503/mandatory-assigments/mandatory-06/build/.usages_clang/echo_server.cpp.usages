22 serialization::archive 19 0 0 0 0 93 H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06 99 H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\build 0 0 560 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 1 < 1 10 1 11 18446744073709551615 5 boost 1 11 1 16 18446744073709551615 1 / 1 16 1 17 18446744073709551615 4 asio 1 17 1 21 18446744073709551615 1 . 1 21 1 22 18446744073709551615 3 hpp 1 22 1 25 18446744073709551615 1 > 1 25 1 26 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 8 iostream 2 11 2 19 18446744073709551615 1 > 2 19 2 20 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 6 string 3 11 3 17 18446744073709551615 1 > 3 17 3 18 18446744073709551615 5 using 5 1 5 6 18446744073709551615 9 namespace 5 7 5 16 18446744073709551615 3 std 5 17 5 20 0 1 ; 5 20 5 21 18446744073709551615 5 using 6 1 6 6 18446744073709551615 9 namespace 6 7 6 16 18446744073709551615 5 boost 6 17 6 22 1 2 :: 6 22 6 24 18446744073709551615 4 asio 6 24 6 28 2 2 :: 6 28 6 30 18446744073709551615 2 ip 6 30 6 32 3 1 ; 6 32 6 33 18446744073709551615 5 class 8 1 8 6 18446744073709551615 10 EchoServer 8 7 8 17 4 1 { 8 18 8 19 18446744073709551615 7 private 9 1 9 8 18446744073709551615 1 : 9 8 9 9 18446744073709551615 5 class 10 3 10 8 18446744073709551615 10 Connection 10 9 10 19 5 1 { 10 20 10 21 18446744073709551615 6 public 11 3 11 9 18446744073709551615 1 : 11 9 11 10 18446744073709551615 3 tcp 12 5 12 8 6 2 :: 12 8 12 10 18446744073709551615 6 socket 12 10 12 16 7 6 socket 12 17 12 23 8 1 ; 12 23 12 24 18446744073709551615 10 Connection 13 5 13 15 5 1 ( 13 15 13 16 5 5 boost 13 16 13 21 1 2 :: 13 21 13 23 18446744073709551615 4 asio 13 23 13 27 2 2 :: 13 27 13 29 18446744073709551615 10 io_service 13 29 13 39 9 1 & 13 40 13 41 18446744073709551615 10 io_service 13 41 13 51 10 1 ) 13 51 13 52 5 1 : 13 53 13 54 5 6 socket 13 55 13 61 8 1 ( 13 61 13 62 11 10 io_service 13 62 13 72 10 1 ) 13 72 13 73 11 1 { 13 74 13 75 18446744073709551615 1 } 13 75 13 76 18446744073709551615 1 } 14 3 14 4 18446744073709551615 1 ; 14 4 14 5 18446744073709551615 5 boost 16 3 16 8 1 2 :: 16 8 16 10 18446744073709551615 4 asio 16 10 16 14 2 2 :: 16 14 16 16 18446744073709551615 10 io_service 16 16 16 26 9 10 io_service 16 27 16 37 12 1 ; 16 37 16 38 18446744073709551615 3 tcp 18 3 18 6 6 2 :: 18 6 18 8 18446744073709551615 8 endpoint 18 8 18 16 13 8 endpoint 18 17 18 25 14 1 ; 18 25 18 26 18446744073709551615 3 tcp 19 3 19 6 6 2 :: 19 6 19 8 18446744073709551615 8 acceptor 19 8 19 16 15 8 acceptor 19 17 19 25 16 1 ; 19 25 19 26 18446744073709551615 6 string 21 3 21 9 17 15 generate_header 21 10 21 25 18 1 ( 21 25 21 26 18 3 int 21 26 21 29 18446744073709551615 4 code 21 30 21 34 19 1 , 21 34 21 35 18 3 int 21 36 21 39 18446744073709551615 6 length 21 40 21 46 20 1 ) 21 46 21 47 18 1 { 21 48 21 49 18446744073709551615 6 return 22 5 22 11 18446744073709551615 11 "HTTP/1.1 " 22 12 22 23 18446744073709551615 1 + 22 24 22 25 21 9 to_string 22 26 22 35 22 1 ( 22 35 22 36 22 4 code 22 36 22 40 19 1 ) 22 40 22 41 22 1 + 22 42 22 43 21 9 " OK\r\n" 22 44 22 53 18446744073709551615 1 + 22 54 22 55 21 44 "Content-Type: text/html; charset=UTF-8\r\n" 22 56 22 100 18446744073709551615 1 + 22 101 22 102 21 18 "Content-Length: " 22 103 22 121 18446744073709551615 1 + 22 122 22 123 21 9 to_string 22 124 22 133 22 1 ( 22 133 22 134 22 6 length 22 134 22 140 20 1 ) 22 140 22 141 22 1 + 22 142 22 143 21 10 "\r\n\r\n" 22 144 22 154 18446744073709551615 1 ; 22 154 22 155 18446744073709551615 1 } 23 3 23 4 18446744073709551615 6 string 25 3 25 9 17 13 generate_body 25 10 25 23 23 1 ( 25 23 25 24 23 5 const 25 24 25 29 18446744073709551615 4 char 25 30 25 34 18446744073709551615 5 title 25 35 25 40 24 1 [ 25 40 25 41 18446744073709551615 1 ] 25 41 25 42 18446744073709551615 1 ) 25 42 25 43 23 1 { 25 44 25 45 18446744073709551615 6 return 26 5 26 11 18446744073709551615 1 ( 26 12 26 13 18446744073709551615 14 "<html><body>" 26 13 26 27 18446744073709551615 1 + 26 28 26 29 21 3 std 26 30 26 33 0 2 :: 26 33 26 35 18446744073709551615 6 string 26 35 26 41 17 1 ( 26 41 26 42 25 5 title 26 42 26 47 24 1 ) 26 47 26 48 25 1 + 26 49 26 50 21 16 "</body></html>" 26 51 26 67 18446744073709551615 1 ) 26 67 26 68 18446744073709551615 1 ; 26 68 26 69 18446744073709551615 1 } 27 3 27 4 18446744073709551615 4 void 29 3 29 7 18446744073709551615 14 handle_request 29 8 29 22 26 1 ( 29 22 29 23 26 10 shared_ptr 29 23 29 33 27 1 < 29 33 29 34 18446744073709551615 10 Connection 29 34 29 44 5 1 > 29 44 29 45 18446744073709551615 10 connection 29 46 29 56 28 1 ) 29 56 29 57 26 1 { 29 58 29 59 18446744073709551615 4 auto 30 5 30 9 18446744073709551615 11 read_buffer 30 10 30 21 29 1 = 30 22 30 23 18446744073709551615 11 make_shared 30 24 30 35 30 1 < 30 35 30 36 30 5 boost 30 36 30 41 1 2 :: 30 41 30 43 30 4 asio 30 43 30 47 2 2 :: 30 47 30 49 30 9 streambuf 30 49 30 58 31 1 > 30 58 30 59 30 1 ( 30 59 30 60 30 1 ) 30 60 30 61 30 1 ; 30 61 30 62 18446744073709551615 42 // Read from client until newline ("\r\n") 31 5 31 47 18446744073709551615 16 async_read_until 32 5 32 21 32 1 ( 32 21 32 22 32 10 connection 32 22 32 32 28 2 -> 32 32 32 34 33 6 socket 32 34 32 40 8 1 , 32 40 32 41 32 1 * 32 42 32 43 34 11 read_buffer 32 43 32 54 29 1 , 32 54 32 55 32 6 "\r\n" 32 56 32 62 18446744073709551615 1 , 32 62 32 63 32 1 [ 33 22 33 23 18446744073709551615 4 this 33 23 33 27 18446744073709551615 1 , 33 27 33 28 18446744073709551615 10 connection 33 29 33 39 28 1 , 33 39 33 40 18446744073709551615 11 read_buffer 33 41 33 52 29 1 ] 33 52 33 53 18446744073709551615 1 ( 33 53 33 54 18446744073709551615 5 const 33 54 33 59 18446744073709551615 5 boost 33 60 33 65 1 2 :: 33 65 33 67 18446744073709551615 6 system 33 67 33 73 35 2 :: 33 73 33 75 18446744073709551615 10 error_code 33 75 33 85 36 1 & 33 86 33 87 18446744073709551615 2 ec 33 87 33 89 37 1 , 33 89 33 90 18446744073709551615 6 size_t 33 91 33 97 38 1 ) 33 97 33 98 18446744073709551615 1 { 33 99 33 100 18446744073709551615 16 // If not error: 34 24 34 40 18446744073709551615 2 if 35 24 35 26 18446744073709551615 1 ( 35 27 35 28 18446744073709551615 1 ! 35 28 35 29 18446744073709551615 2 ec 35 29 35 31 37 1 ) 35 31 35 32 18446744073709551615 1 { 35 33 35 34 18446744073709551615 42 // Retrieve message from client as string: 36 26 36 68 18446744073709551615 7 istream 37 26 37 33 39 11 read_stream 37 34 37 45 40 1 ( 37 45 37 46 41 11 read_buffer 37 46 37 57 29 1 . 37 57 37 58 42 3 get 37 58 37 61 42 1 ( 37 61 37 62 42 1 ) 37 62 37 63 42 1 ) 37 63 37 64 41 1 ; 37 64 37 65 18446744073709551615 3 std 38 26 38 29 0 2 :: 38 29 38 31 18446744073709551615 6 string 38 31 38 37 17 7 message 38 38 38 45 43 1 ; 38 45 38 46 18446744073709551615 7 getline 39 26 39 33 44 1 ( 39 33 39 34 44 11 read_stream 39 34 39 45 40 1 , 39 45 39 46 44 7 message 39 47 39 54 43 1 ) 39 54 39 55 44 1 ; 39 55 39 56 18446744073709551615 7 message 40 26 40 33 43 1 . 40 33 40 34 45 8 pop_back 40 34 40 42 45 1 ( 40 42 40 43 45 1 ) 40 43 40 44 45 1 ; 40 44 40 45 18446744073709551615 36 // Remove "\r" at the end of message 40 46 40 82 18446744073709551615 56 // Close connection when "exit" is retrieved from client 42 26 42 82 18446744073709551615 2 if 43 26 43 28 18446744073709551615 1 ( 43 29 43 30 18446744073709551615 7 message 43 30 43 37 43 2 == 43 38 43 40 46 6 "exit" 43 41 43 47 18446744073709551615 1 ) 43 47 43 48 18446744073709551615 6 return 44 28 44 34 18446744073709551615 1 ; 44 34 44 35 18446744073709551615 4 cout 46 26 46 30 47 2 << 46 31 46 33 48 35 "Message from a connected client: " 46 34 46 69 18446744073709551615 2 << 46 70 46 72 48 7 message 46 73 46 80 43 2 << 46 81 46 83 49 4 endl 46 84 46 88 50 1 ; 46 88 46 89 18446744073709551615 4 auto 48 26 48 30 18446744073709551615 12 write_buffer 48 31 48 43 51 1 = 48 44 48 45 18446744073709551615 11 make_shared 48 46 48 57 30 1 < 48 57 48 58 30 5 boost 48 58 48 63 1 2 :: 48 63 48 65 30 4 asio 48 65 48 69 2 2 :: 48 69 48 71 30 9 streambuf 48 71 48 80 31 1 > 48 80 48 81 30 1 ( 48 81 48 82 30 1 ) 48 82 48 83 30 1 ; 48 83 48 84 18446744073709551615 7 ostream 49 26 49 33 52 12 write_stream 49 34 49 46 53 1 ( 49 46 49 47 54 12 write_buffer 49 47 49 59 51 1 . 49 59 49 60 42 3 get 49 60 49 63 42 1 ( 49 63 49 64 42 1 ) 49 64 49 65 42 1 ) 49 65 49 66 54 1 ; 49 66 49 67 18446744073709551615 2 if 51 26 51 28 18446744073709551615 1 ( 51 29 51 30 18446744073709551615 7 message 51 30 51 37 43 2 == 51 38 51 40 46 16 "GET / HTTP/1.1" 51 41 51 57 18446744073709551615 1 ) 51 57 51 58 18446744073709551615 1 { 51 59 51 60 18446744073709551615 6 string 52 28 52 34 17 4 body 52 35 52 39 55 1 = 52 40 52 41 18446744073709551615 13 generate_body 52 42 52 55 23 1 ( 52 55 52 56 23 30 "<h1>Dette er hovedsiden</h1>" 52 56 52 86 18446744073709551615 1 ) 52 86 52 87 23 1 ; 52 87 52 88 18446744073709551615 6 string 53 28 53 34 17 4 head 53 35 53 39 56 1 = 53 40 53 41 18446744073709551615 15 generate_header 53 42 53 57 18 1 ( 53 57 53 58 18 3 200 53 58 53 61 18446744073709551615 1 , 53 61 53 62 18 4 body 53 63 53 67 55 1 . 53 67 53 68 57 4 size 53 68 53 72 57 1 ( 53 72 53 73 57 1 ) 53 73 53 74 57 1 ) 53 74 53 75 18 1 ; 53 75 53 76 18446744073709551615 12 write_stream 54 28 54 40 53 2 << 54 41 54 43 48 4 head 54 44 54 48 56 2 << 54 49 54 51 48 4 body 54 52 54 56 55 1 ; 54 56 54 57 18446744073709551615 1 } 55 26 55 27 18446744073709551615 4 else 55 28 55 32 18446744073709551615 2 if 55 33 55 35 18446744073709551615 1 ( 55 36 55 37 18446744073709551615 7 message 55 37 55 44 43 2 == 55 45 55 47 46 23 "GET /en_side HTTP/1.1" 55 48 55 71 18446744073709551615 1 ) 55 71 55 72 18446744073709551615 1 { 55 73 55 74 18446744073709551615 6 string 56 28 56 34 17 4 body 56 35 56 39 58 1 = 56 40 56 41 18446744073709551615 13 generate_body 56 42 56 55 23 1 ( 56 55 56 56 23 27 "<h1>Dette er en side</h1>" 56 56 56 83 18446744073709551615 1 ) 56 83 56 84 23 1 ; 56 84 56 85 18446744073709551615 6 string 57 28 57 34 17 4 head 57 35 57 39 59 1 = 57 40 57 41 18446744073709551615 15 generate_header 57 42 57 57 18 1 ( 57 57 57 58 18 3 200 57 58 57 61 18446744073709551615 1 , 57 61 57 62 18 4 body 57 63 57 67 58 1 . 57 67 57 68 57 4 size 57 68 57 72 57 1 ( 57 72 57 73 57 1 ) 57 73 57 74 57 1 ) 57 74 57 75 18 1 ; 57 75 57 76 18446744073709551615 12 write_stream 58 28 58 40 53 2 << 58 41 58 43 48 4 head 58 44 58 48 59 2 << 58 49 58 51 48 4 body 58 52 58 56 58 1 ; 58 56 58 57 18446744073709551615 1 } 59 26 59 27 18446744073709551615 4 else 59 28 59 32 18446744073709551615 1 { 59 33 59 34 18446744073709551615 6 string 60 28 60 34 17 4 body 60 35 60 39 60 1 = 60 40 60 41 18446744073709551615 13 generate_body 60 42 60 55 23 1 ( 60 55 60 56 23 32 "<h1>Error 404: Not found.</h1>" 60 56 60 88 18446744073709551615 1 ) 60 88 60 89 23 1 ; 60 89 60 90 18446744073709551615 6 string 61 28 61 34 17 4 head 61 35 61 39 61 1 = 61 40 61 41 18446744073709551615 15 generate_header 61 42 61 57 18 1 ( 61 57 61 58 18 3 404 61 58 61 61 18446744073709551615 1 , 61 61 61 62 18 4 body 61 63 61 67 60 1 . 61 67 61 68 57 4 size 61 68 61 72 57 1 ( 61 72 61 73 57 1 ) 61 73 61 74 57 1 ) 61 74 61 75 18 1 ; 61 75 61 76 18446744073709551615 12 write_stream 62 28 62 40 53 2 << 62 41 62 43 48 4 head 62 44 62 48 61 2 << 62 49 62 51 48 4 body 62 52 62 56 60 1 ; 62 56 62 57 18446744073709551615 1 } 63 26 63 27 18446744073709551615 39 // Add message to be written to client: 65 26 65 65 18446744073709551615 37 // write_stream << message << "\r\n"; 66 26 66 63 18446744073709551615 18 // Write to client 68 26 68 44 18446744073709551615 11 async_write 69 26 69 37 62 1 ( 69 37 69 38 62 10 connection 69 38 69 48 28 2 -> 69 48 69 50 33 6 socket 69 50 69 56 8 1 , 69 56 69 57 62 1 * 69 58 69 59 34 12 write_buffer 69 59 69 71 51 1 , 69 71 69 72 62 1 [ 70 38 70 39 18446744073709551615 4 this 70 39 70 43 18446744073709551615 1 , 70 43 70 44 18446744073709551615 10 connection 70 45 70 55 28 1 , 70 55 70 56 18446744073709551615 12 write_buffer 70 57 70 69 51 1 ] 70 69 70 70 18446744073709551615 1 ( 70 70 70 71 18446744073709551615 5 const 70 71 70 76 18446744073709551615 5 boost 70 77 70 82 1 2 :: 70 82 70 84 18446744073709551615 6 system 70 84 70 90 35 2 :: 70 90 70 92 18446744073709551615 10 error_code 70 92 70 102 36 1 & 70 103 70 104 18446744073709551615 2 ec 70 104 70 106 63 1 , 70 106 70 107 18446744073709551615 6 size_t 70 108 70 114 38 1 ) 70 114 70 115 18446744073709551615 1 { 70 116 70 117 18446744073709551615 16 // If not error: 71 40 71 56 18446744073709551615 2 if 72 40 72 42 18446744073709551615 1 ( 72 43 72 44 18446744073709551615 1 ! 72 44 72 45 18446744073709551615 2 ec 72 45 72 47 63 1 ) 72 47 72 48 18446744073709551615 14 handle_request 73 42 73 56 26 1 ( 73 56 73 57 26 10 connection 73 57 73 67 28 1 ) 73 67 73 68 26 1 ; 73 68 73 69 18446744073709551615 1 } 74 38 74 39 18446744073709551615 1 ) 74 39 74 40 62 1 ; 74 40 74 41 18446744073709551615 1 } 75 24 75 25 18446744073709551615 1 } 76 22 76 23 18446744073709551615 1 ) 76 23 76 24 32 1 ; 76 24 76 25 18446744073709551615 1 } 77 3 77 4 18446744073709551615 4 void 79 3 79 7 18446744073709551615 6 accept 79 8 79 14 64 1 ( 79 14 79 15 64 1 ) 79 15 79 16 64 1 { 79 17 79 18 18446744073709551615 78 // The (client) connection is added to the lambda parameter and handle_request 80 5 80 83 18446744073709551615 65 // in order to keep the object alive for as long as it is needed. 81 5 81 70 18446744073709551615 4 auto 82 5 82 9 18446744073709551615 10 connection 82 10 82 20 65 1 = 82 21 82 22 18446744073709551615 11 make_shared 82 23 82 34 30 1 < 82 34 82 35 30 10 Connection 82 35 82 45 5 1 > 82 45 82 46 30 1 ( 82 46 82 47 30 10 io_service 82 47 82 57 12 1 ) 82 57 82 58 30 1 ; 82 58 82 59 18446744073709551615 97 // Accepts a new (client) connection. On connection, immediately start accepting a new connection 84 5 84 102 18446744073709551615 8 acceptor 85 5 85 13 16 1 . 85 13 85 14 66 12 async_accept 85 14 85 26 66 1 ( 85 26 85 27 66 10 connection 85 27 85 37 65 2 -> 85 37 85 39 33 6 socket 85 39 85 45 8 1 , 85 45 85 46 66 1 [ 85 47 85 48 18446744073709551615 4 this 85 48 85 52 18446744073709551615 1 , 85 52 85 53 18446744073709551615 10 connection 85 54 85 64 65 1 ] 85 64 85 65 18446744073709551615 1 ( 85 65 85 66 18446744073709551615 5 const 85 66 85 71 18446744073709551615 5 boost 85 72 85 77 1 2 :: 85 77 85 79 18446744073709551615 6 system 85 79 85 85 35 2 :: 85 85 85 87 18446744073709551615 10 error_code 85 87 85 97 36 1 & 85 98 85 99 18446744073709551615 2 ec 85 99 85 101 67 1 ) 85 101 85 102 18446744073709551615 1 { 85 103 85 104 18446744073709551615 6 accept 86 7 86 13 64 1 ( 86 13 86 14 64 1 ) 86 14 86 15 64 1 ; 86 15 86 16 18446744073709551615 16 // If not error: 87 7 87 23 18446744073709551615 2 if 88 7 88 9 18446744073709551615 1 ( 88 10 88 11 18446744073709551615 1 ! 88 11 88 12 18446744073709551615 2 ec 88 12 88 14 67 1 ) 88 14 88 15 18446744073709551615 1 { 88 16 88 17 18446744073709551615 14 handle_request 89 9 89 23 26 1 ( 89 23 89 24 26 10 connection 89 24 89 34 65 1 ) 89 34 89 35 26 1 ; 89 35 89 36 18446744073709551615 1 } 90 7 90 8 18446744073709551615 1 } 91 5 91 6 18446744073709551615 1 ) 91 6 91 7 66 1 ; 91 7 91 8 18446744073709551615 1 } 92 3 92 4 18446744073709551615 6 public 94 1 94 7 18446744073709551615 1 : 94 7 94 8 18446744073709551615 10 EchoServer 95 3 95 13 4 1 ( 95 13 95 14 4 1 ) 95 14 95 15 4 1 : 95 16 95 17 4 8 endpoint 95 18 95 26 14 1 ( 95 26 95 27 68 3 tcp 95 27 95 30 6 2 :: 95 30 95 32 69 2 v4 95 32 95 34 69 1 ( 95 34 95 35 69 1 ) 95 35 95 36 69 1 , 95 36 95 37 68 4 8080 95 38 95 42 18446744073709551615 1 ) 95 42 95 43 68 1 , 95 43 95 44 4 8 acceptor 95 45 95 53 16 1 ( 95 53 95 54 70 10 io_service 95 54 95 64 12 1 , 95 64 95 65 70 8 endpoint 95 66 95 74 14 1 ) 95 74 95 75 70 1 { 95 76 95 77 18446744073709551615 1 } 95 77 95 78 18446744073709551615 4 void 97 3 97 7 18446744073709551615 5 start 97 8 97 13 71 1 ( 97 13 97 14 71 1 ) 97 14 97 15 71 1 { 97 16 97 17 18446744073709551615 6 accept 98 5 98 11 64 1 ( 98 11 98 12 64 1 ) 98 12 98 13 64 1 ; 98 13 98 14 18446744073709551615 10 io_service 100 5 100 15 12 1 . 100 15 100 16 72 3 run 100 16 100 19 72 1 ( 100 19 100 20 72 1 ) 100 20 100 21 72 1 ; 100 21 100 22 18446744073709551615 1 } 101 3 101 4 18446744073709551615 1 } 102 1 102 2 18446744073709551615 1 ; 102 2 102 3 18446744073709551615 3 int 104 1 104 4 18446744073709551615 4 main 104 5 104 9 73 1 ( 104 9 104 10 73 1 ) 104 10 104 11 73 1 { 104 12 104 13 18446744073709551615 10 EchoServer 105 3 105 13 4 11 echo_server 105 14 105 25 74 1 ; 105 25 105 26 18446744073709551615 4 cout 107 3 107 7 47 2 << 107 8 107 10 48 22 "Starting echo server" 107 11 107 33 18446744073709551615 2 << 107 34 107 36 49 4 endl 107 37 107 41 50 2 << 108 8 108 10 48 83 "Connect in a terminal with: telnet localhost 8080. Type 'exit' to end connection." 108 11 108 94 18446744073709551615 2 << 108 95 108 97 49 4 endl 108 98 108 102 50 1 ; 108 102 108 103 18446744073709551615 11 echo_server 110 3 110 14 74 1 . 110 14 110 15 71 5 start 110 15 110 20 71 1 ( 110 20 110 21 71 1 ) 110 21 110 22 71 1 ; 110 22 110 23 18446744073709551615 1 } 111 1 111 2 18446744073709551615 0 0 75 0 0 0 22 0 0 1 13 0 3 std 22 1 13 0 5 boost 22 1 13 0 10 asio:boost 22 1 13 0 13 ip:asio:boost 4 1 13 0 10 EchoServer 4 1 13 0 21 Connection:EchoServer 4 1 13 0 17 tcp:ip:asio:boost 20 1 13 0 24 socket:tcp:ip:asio:boost 6 1 13 0 28 socket:Connection:EchoServer 20 1 13 0 21 io_service:asio:boost 10 1 13 0 115 13:41:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 24 1 13 0 30 basic_stream_socket:asio:boost 6 1 13 0 21 io_service:EchoServer 20 1 13 0 26 endpoint:tcp:ip:asio:boost 6 1 13 0 19 endpoint:EchoServer 20 1 13 0 26 acceptor:tcp:ip:asio:boost 6 1 13 0 19 acceptor:EchoServer 20 1 13 0 10 string:std 21 1 13 0 26 generate_header:EchoServer 10 1 13 0 115 21:30:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 10 1 13 0 115 21:40:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 8 1 13 0 13 operator+:std 8 1 13 0 21 to_string:__cxx11:std 21 1 13 0 24 generate_body:EchoServer 10 1 13 0 115 25:35:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 24 1 13 0 24 basic_string:__cxx11:std 21 1 13 0 25 handle_request:EchoServer 31 1 13 0 14 shared_ptr:std 10 1 13 0 115 29:46:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 9 1 13 0 115 30:10:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 8 1 13 0 15 make_shared:std 20 1 13 0 20 streambuf:asio:boost 8 1 13 0 27 async_read_until:asio:boost 21 1 13 0 34 operator->:__shared_ptr_access:std 21 1 13 0 33 operator*:__shared_ptr_access:std 22 1 13 0 12 system:boost 4 1 13 0 23 error_code:system:boost 10 1 13 0 115 33:87:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 20 1 13 0 6 size_t 20 1 13 0 11 istream:std 9 1 13 0 115 37:34:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 24 1 13 0 17 basic_istream:std 21 1 13 0 20 get:__shared_ptr:std 9 1 13 0 115 38:38:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 8 1 13 0 11 getline:std 21 1 13 0 33 pop_back:basic_string:__cxx11:std 8 1 13 0 14 operator==:std 9 1 13 0 8 cout:std 8 1 13 0 12 operator:std 21 1 13 0 26 operator:basic_ostream:std 8 1 13 0 8 endl:std 9 1 13 0 115 48:31:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 20 1 13 0 11 ostream:std 9 1 13 0 115 49:34:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 24 1 13 0 17 basic_ostream:std 9 1 13 0 115 52:35:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 9 1 13 0 115 53:35:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 21 1 13 0 29 size:basic_string:__cxx11:std 9 1 13 0 115 56:35:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 9 1 13 0 115 57:35:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 9 1 13 0 115 60:35:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 9 1 13 0 115 61:35:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 8 1 13 0 22 async_write:asio:boost 10 1 13 0 116 70:104:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 21 1 13 0 17 accept:EchoServer 9 1 13 0 115 82:10:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 21 1 13 0 45 async_accept:basic_socket_acceptor:asio:boost 10 1 13 0 115 85:99:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 24 1 13 0 28 basic_endpoint:ip:asio:boost 21 1 13 0 20 v4:tcp:ip:asio:boost 24 1 13 0 32 basic_socket_acceptor:asio:boost 21 1 13 0 16 start:EchoServer 21 1 13 0 25 run:io_context:asio:boost 8 1 13 0 4 main 9 1 13 0 116 105:14:H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 0 0 1 0 0 0 109 H:/github\cs-ntnu\ntnu-dtu\5-semester-dtu-exchange\INFT2503\mandatory-assigments\mandatory-06\echo_server.cpp 1699407955